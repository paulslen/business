import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface ArbosTestInterface extends utils.Interface {
    contractName: "ArbosTest";
    functions: {
        "burnArbGas(uint256)": FunctionFragment;
        "getAccountInfo(address)": FunctionFragment;
        "getMarshalledStorage(address)": FunctionFragment;
        "installAccount(address,bool,uint256,uint256,bytes,bytes)": FunctionFragment;
        "setBalance(address,uint256)": FunctionFragment;
        "setCode(address,bytes)": FunctionFragment;
        "setNonce(address,uint256)": FunctionFragment;
        "setState(address,bytes)": FunctionFragment;
        "store(address,uint256,uint256)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "burnArbGas", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getAccountInfo", values: [string]): string;
    encodeFunctionData(functionFragment: "getMarshalledStorage", values: [string]): string;
    encodeFunctionData(functionFragment: "installAccount", values: [string, boolean, BigNumberish, BigNumberish, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "setBalance", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setCode", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "setNonce", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setState", values: [string, BytesLike]): string;
    encodeFunctionData(functionFragment: "store", values: [string, BigNumberish, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "burnArbGas", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountInfo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMarshalledStorage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "installAccount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setCode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setState", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
    events: {};
}
export interface ArbosTest extends BaseContract {
    contractName: "ArbosTest";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ArbosTestInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        burnArbGas(gasAmount: BigNumberish, overrides?: CallOverrides): Promise<[void]>;
        getAccountInfo(addr: string, overrides?: CallOverrides): Promise<[void]>;
        getMarshalledStorage(addr: string, overrides?: CallOverrides): Promise<[void]>;
        installAccount(addr: string, isEOA: boolean, balance: BigNumberish, nonce: BigNumberish, code: BytesLike, initStorage: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setBalance(addr: string, balance: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setCode(addr: string, code: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setNonce(addr: string, nonce: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setState(addr: string, state: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        store(addr: string, key: BigNumberish, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    burnArbGas(gasAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
    getAccountInfo(addr: string, overrides?: CallOverrides): Promise<void>;
    getMarshalledStorage(addr: string, overrides?: CallOverrides): Promise<void>;
    installAccount(addr: string, isEOA: boolean, balance: BigNumberish, nonce: BigNumberish, code: BytesLike, initStorage: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setBalance(addr: string, balance: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setCode(addr: string, code: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setNonce(addr: string, nonce: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setState(addr: string, state: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    store(addr: string, key: BigNumberish, value: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        burnArbGas(gasAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        getAccountInfo(addr: string, overrides?: CallOverrides): Promise<void>;
        getMarshalledStorage(addr: string, overrides?: CallOverrides): Promise<void>;
        installAccount(addr: string, isEOA: boolean, balance: BigNumberish, nonce: BigNumberish, code: BytesLike, initStorage: BytesLike, overrides?: CallOverrides): Promise<void>;
        setBalance(addr: string, balance: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setCode(addr: string, code: BytesLike, overrides?: CallOverrides): Promise<void>;
        setNonce(addr: string, nonce: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setState(addr: string, state: BytesLike, overrides?: CallOverrides): Promise<void>;
        store(addr: string, key: BigNumberish, value: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        burnArbGas(gasAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getAccountInfo(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
        getMarshalledStorage(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
        installAccount(addr: string, isEOA: boolean, balance: BigNumberish, nonce: BigNumberish, code: BytesLike, initStorage: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setBalance(addr: string, balance: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setCode(addr: string, code: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setNonce(addr: string, nonce: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setState(addr: string, state: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        store(addr: string, key: BigNumberish, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        burnArbGas(gasAmount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAccountInfo(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMarshalledStorage(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        installAccount(addr: string, isEOA: boolean, balance: BigNumberish, nonce: BigNumberish, code: BytesLike, initStorage: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setBalance(addr: string, balance: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setCode(addr: string, code: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setNonce(addr: string, nonce: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setState(addr: string, state: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        store(addr: string, key: BigNumberish, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
