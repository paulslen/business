import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface ArbRetryableTxInterface extends utils.Interface {
    contractName: "ArbRetryableTx";
    functions: {
        "cancel(bytes32)": FunctionFragment;
        "getBeneficiary(bytes32)": FunctionFragment;
        "getKeepalivePrice(bytes32)": FunctionFragment;
        "getLifetime()": FunctionFragment;
        "getSubmissionPrice(uint256)": FunctionFragment;
        "getTimeout(bytes32)": FunctionFragment;
        "keepalive(bytes32)": FunctionFragment;
        "redeem(bytes32)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "cancel", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getBeneficiary", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getKeepalivePrice", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getLifetime", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSubmissionPrice", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTimeout", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "keepalive", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "redeem", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBeneficiary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getKeepalivePrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLifetime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSubmissionPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "keepalive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
    events: {
        "Canceled(bytes32)": EventFragment;
        "LifetimeExtended(bytes32,uint256)": EventFragment;
        "Redeemed(bytes32)": EventFragment;
        "TicketCreated(bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Canceled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LifetimeExtended"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TicketCreated"): EventFragment;
}
export declare type CanceledEvent = TypedEvent<[string], {
    userTxHash: string;
}>;
export declare type CanceledEventFilter = TypedEventFilter<CanceledEvent>;
export declare type LifetimeExtendedEvent = TypedEvent<[
    string,
    BigNumber
], {
    userTxHash: string;
    newTimeout: BigNumber;
}>;
export declare type LifetimeExtendedEventFilter = TypedEventFilter<LifetimeExtendedEvent>;
export declare type RedeemedEvent = TypedEvent<[string], {
    userTxHash: string;
}>;
export declare type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;
export declare type TicketCreatedEvent = TypedEvent<[string], {
    userTxHash: string;
}>;
export declare type TicketCreatedEventFilter = TypedEventFilter<TicketCreatedEvent>;
export interface ArbRetryableTx extends BaseContract {
    contractName: "ArbRetryableTx";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ArbRetryableTxInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        cancel(userTxHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getBeneficiary(userTxHash: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        getKeepalivePrice(userTxHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        getLifetime(overrides?: CallOverrides): Promise<[BigNumber]>;
        getSubmissionPrice(calldataSize: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        getTimeout(userTxHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;
        keepalive(userTxHash: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        redeem(userTxHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    cancel(userTxHash: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getBeneficiary(userTxHash: BytesLike, overrides?: CallOverrides): Promise<string>;
    getKeepalivePrice(userTxHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
    getLifetime(overrides?: CallOverrides): Promise<BigNumber>;
    getSubmissionPrice(calldataSize: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
    getTimeout(userTxHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    keepalive(userTxHash: BytesLike, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    redeem(userTxHash: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        cancel(userTxHash: BytesLike, overrides?: CallOverrides): Promise<void>;
        getBeneficiary(userTxHash: BytesLike, overrides?: CallOverrides): Promise<string>;
        getKeepalivePrice(userTxHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        getLifetime(overrides?: CallOverrides): Promise<BigNumber>;
        getSubmissionPrice(calldataSize: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        getTimeout(userTxHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        keepalive(userTxHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        redeem(userTxHash: BytesLike, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Canceled(bytes32)"(userTxHash?: BytesLike | null): CanceledEventFilter;
        Canceled(userTxHash?: BytesLike | null): CanceledEventFilter;
        "LifetimeExtended(bytes32,uint256)"(userTxHash?: BytesLike | null, newTimeout?: null): LifetimeExtendedEventFilter;
        LifetimeExtended(userTxHash?: BytesLike | null, newTimeout?: null): LifetimeExtendedEventFilter;
        "Redeemed(bytes32)"(userTxHash?: BytesLike | null): RedeemedEventFilter;
        Redeemed(userTxHash?: BytesLike | null): RedeemedEventFilter;
        "TicketCreated(bytes32)"(userTxHash?: BytesLike | null): TicketCreatedEventFilter;
        TicketCreated(userTxHash?: BytesLike | null): TicketCreatedEventFilter;
    };
    estimateGas: {
        cancel(userTxHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getBeneficiary(userTxHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getKeepalivePrice(userTxHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getLifetime(overrides?: CallOverrides): Promise<BigNumber>;
        getSubmissionPrice(calldataSize: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getTimeout(userTxHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        keepalive(userTxHash: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        redeem(userTxHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        cancel(userTxHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getBeneficiary(userTxHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getKeepalivePrice(userTxHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getLifetime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSubmissionPrice(calldataSize: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTimeout(userTxHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        keepalive(userTxHash: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        redeem(userTxHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
