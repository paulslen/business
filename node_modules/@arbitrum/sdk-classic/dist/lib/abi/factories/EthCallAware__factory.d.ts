import { Signer, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { EthCallAware, EthCallAwareInterface } from '../EthCallAware';
declare type EthCallAwareConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class EthCallAware__factory extends ContractFactory {
    constructor(...args: EthCallAwareConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<EthCallAware>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): EthCallAware;
    connect(signer: Signer): EthCallAware__factory;
    static readonly contractName: 'EthCallAware';
    readonly contractName: 'EthCallAware';
    static readonly bytecode = "0x60b2610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c80631d791bba146042578063e7c1ce6f14605d575b600080fd5b604a61ca1181565b6040519081526020015b60405180910390f35b606561ca1181565b6040516001600160a01b039091168152602001605456fea2646970667358221220f867645a168cf00ec91cbc0dbf84563c1bbc7ebbcdc2e4b360184e7e13c9c18b64736f6c63430008090033";
    static readonly abi: {
        inputs: never[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    }[];
    static createInterface(): EthCallAwareInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): EthCallAware;
}
export {};
