import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface IChallengeInterface extends utils.Interface {
    contractName: "IChallenge";
    functions: {
        "asserter()": FunctionFragment;
        "challenger()": FunctionFragment;
        "clearChallenge()": FunctionFragment;
        "currentResponderTimeLeft()": FunctionFragment;
        "initializeChallenge(address[],address,bytes32,uint256,address,address,uint256,uint256,address,address)": FunctionFragment;
        "lastMoveBlock()": FunctionFragment;
        "timeout()": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "asserter", values?: undefined): string;
    encodeFunctionData(functionFragment: "challenger", values?: undefined): string;
    encodeFunctionData(functionFragment: "clearChallenge", values?: undefined): string;
    encodeFunctionData(functionFragment: "currentResponderTimeLeft", values?: undefined): string;
    encodeFunctionData(functionFragment: "initializeChallenge", values: [
        string[],
        string,
        BytesLike,
        BigNumberish,
        string,
        string,
        BigNumberish,
        BigNumberish,
        string,
        string
    ]): string;
    encodeFunctionData(functionFragment: "lastMoveBlock", values?: undefined): string;
    encodeFunctionData(functionFragment: "timeout", values?: undefined): string;
    decodeFunctionResult(functionFragment: "asserter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "challenger", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clearChallenge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentResponderTimeLeft", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initializeChallenge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lastMoveBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "timeout", data: BytesLike): Result;
    events: {};
}
export interface IChallenge extends BaseContract {
    contractName: "IChallenge";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IChallengeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        asserter(overrides?: CallOverrides): Promise<[string]>;
        challenger(overrides?: CallOverrides): Promise<[string]>;
        clearChallenge(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        currentResponderTimeLeft(overrides?: CallOverrides): Promise<[BigNumber]>;
        initializeChallenge(_executors: string[], _resultReceiver: string, _executionHash: BytesLike, _maxMessageCount: BigNumberish, _asserter: string, _challenger: string, _asserterTimeLeft: BigNumberish, _challengerTimeLeft: BigNumberish, _sequencerBridge: string, _delayedBridge: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        lastMoveBlock(overrides?: CallOverrides): Promise<[BigNumber]>;
        timeout(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    asserter(overrides?: CallOverrides): Promise<string>;
    challenger(overrides?: CallOverrides): Promise<string>;
    clearChallenge(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    currentResponderTimeLeft(overrides?: CallOverrides): Promise<BigNumber>;
    initializeChallenge(_executors: string[], _resultReceiver: string, _executionHash: BytesLike, _maxMessageCount: BigNumberish, _asserter: string, _challenger: string, _asserterTimeLeft: BigNumberish, _challengerTimeLeft: BigNumberish, _sequencerBridge: string, _delayedBridge: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    lastMoveBlock(overrides?: CallOverrides): Promise<BigNumber>;
    timeout(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        asserter(overrides?: CallOverrides): Promise<string>;
        challenger(overrides?: CallOverrides): Promise<string>;
        clearChallenge(overrides?: CallOverrides): Promise<void>;
        currentResponderTimeLeft(overrides?: CallOverrides): Promise<BigNumber>;
        initializeChallenge(_executors: string[], _resultReceiver: string, _executionHash: BytesLike, _maxMessageCount: BigNumberish, _asserter: string, _challenger: string, _asserterTimeLeft: BigNumberish, _challengerTimeLeft: BigNumberish, _sequencerBridge: string, _delayedBridge: string, overrides?: CallOverrides): Promise<void>;
        lastMoveBlock(overrides?: CallOverrides): Promise<BigNumber>;
        timeout(overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        asserter(overrides?: CallOverrides): Promise<BigNumber>;
        challenger(overrides?: CallOverrides): Promise<BigNumber>;
        clearChallenge(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        currentResponderTimeLeft(overrides?: CallOverrides): Promise<BigNumber>;
        initializeChallenge(_executors: string[], _resultReceiver: string, _executionHash: BytesLike, _maxMessageCount: BigNumberish, _asserter: string, _challenger: string, _asserterTimeLeft: BigNumberish, _challengerTimeLeft: BigNumberish, _sequencerBridge: string, _delayedBridge: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        lastMoveBlock(overrides?: CallOverrides): Promise<BigNumber>;
        timeout(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        asserter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        challenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        clearChallenge(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        currentResponderTimeLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initializeChallenge(_executors: string[], _resultReceiver: string, _executionHash: BytesLike, _maxMessageCount: BigNumberish, _asserter: string, _challenger: string, _asserterTimeLeft: BigNumberish, _challengerTimeLeft: BigNumberish, _sequencerBridge: string, _delayedBridge: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        lastMoveBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        timeout(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
