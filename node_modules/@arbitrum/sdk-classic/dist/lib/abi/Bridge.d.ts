import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface BridgeInterface extends utils.Interface {
    contractName: "Bridge";
    functions: {
        "activeOutbox()": FunctionFragment;
        "allowedInboxList(uint256)": FunctionFragment;
        "allowedInboxes(address)": FunctionFragment;
        "allowedOutboxList(uint256)": FunctionFragment;
        "allowedOutboxes(address)": FunctionFragment;
        "deliverMessageToInbox(uint8,address,bytes32)": FunctionFragment;
        "executeCall(address,uint256,bytes)": FunctionFragment;
        "inboxAccs(uint256)": FunctionFragment;
        "initialize()": FunctionFragment;
        "messageCount()": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setInbox(address,bool)": FunctionFragment;
        "setOutbox(address,bool)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "activeOutbox", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowedInboxList", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "allowedInboxes", values: [string]): string;
    encodeFunctionData(functionFragment: "allowedOutboxList", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "allowedOutboxes", values: [string]): string;
    encodeFunctionData(functionFragment: "deliverMessageToInbox", values: [BigNumberish, string, BytesLike]): string;
    encodeFunctionData(functionFragment: "executeCall", values: [string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "inboxAccs", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "initialize", values?: undefined): string;
    encodeFunctionData(functionFragment: "messageCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setInbox", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setOutbox", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    decodeFunctionResult(functionFragment: "activeOutbox", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowedInboxList", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowedInboxes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowedOutboxList", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowedOutboxes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverMessageToInbox", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboxAccs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInbox", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOutbox", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "BridgeCallTriggered(address,address,uint256,bytes)": EventFragment;
        "InboxToggle(address,bool)": EventFragment;
        "MessageDelivered(uint256,bytes32,address,uint8,address,bytes32)": EventFragment;
        "OutboxToggle(address,bool)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "BridgeCallTriggered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InboxToggle"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MessageDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OutboxToggle"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
export declare type BridgeCallTriggeredEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], {
    outbox: string;
    destAddr: string;
    amount: BigNumber;
    data: string;
}>;
export declare type BridgeCallTriggeredEventFilter = TypedEventFilter<BridgeCallTriggeredEvent>;
export declare type InboxToggleEvent = TypedEvent<[
    string,
    boolean
], {
    inbox: string;
    enabled: boolean;
}>;
export declare type InboxToggleEventFilter = TypedEventFilter<InboxToggleEvent>;
export declare type MessageDeliveredEvent = TypedEvent<[
    BigNumber,
    string,
    string,
    number,
    string,
    string
], {
    messageIndex: BigNumber;
    beforeInboxAcc: string;
    inbox: string;
    kind: number;
    sender: string;
    messageDataHash: string;
}>;
export declare type MessageDeliveredEventFilter = TypedEventFilter<MessageDeliveredEvent>;
export declare type OutboxToggleEvent = TypedEvent<[
    string,
    boolean
], {
    outbox: string;
    enabled: boolean;
}>;
export declare type OutboxToggleEventFilter = TypedEventFilter<OutboxToggleEvent>;
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], {
    previousOwner: string;
    newOwner: string;
}>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface Bridge extends BaseContract {
    contractName: "Bridge";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: BridgeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        activeOutbox(overrides?: CallOverrides): Promise<[string]>;
        allowedInboxList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        allowedInboxes(inbox: string, overrides?: CallOverrides): Promise<[boolean]>;
        allowedOutboxList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        allowedOutboxes(outbox: string, overrides?: CallOverrides): Promise<[boolean]>;
        deliverMessageToInbox(kind: BigNumberish, sender: string, messageDataHash: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        executeCall(destAddr: string, amount: BigNumberish, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        inboxAccs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        initialize(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        messageCount(overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setInbox(inbox: string, enabled: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setOutbox(outbox: string, enabled: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    activeOutbox(overrides?: CallOverrides): Promise<string>;
    allowedInboxList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    allowedInboxes(inbox: string, overrides?: CallOverrides): Promise<boolean>;
    allowedOutboxList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    allowedOutboxes(outbox: string, overrides?: CallOverrides): Promise<boolean>;
    deliverMessageToInbox(kind: BigNumberish, sender: string, messageDataHash: BytesLike, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    executeCall(destAddr: string, amount: BigNumberish, data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    inboxAccs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    initialize(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    messageCount(overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setInbox(inbox: string, enabled: boolean, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setOutbox(outbox: string, enabled: boolean, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        activeOutbox(overrides?: CallOverrides): Promise<string>;
        allowedInboxList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        allowedInboxes(inbox: string, overrides?: CallOverrides): Promise<boolean>;
        allowedOutboxList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        allowedOutboxes(outbox: string, overrides?: CallOverrides): Promise<boolean>;
        deliverMessageToInbox(kind: BigNumberish, sender: string, messageDataHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        executeCall(destAddr: string, amount: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<[boolean, string] & {
            success: boolean;
            returnData: string;
        }>;
        inboxAccs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        initialize(overrides?: CallOverrides): Promise<void>;
        messageCount(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setInbox(inbox: string, enabled: boolean, overrides?: CallOverrides): Promise<void>;
        setOutbox(outbox: string, enabled: boolean, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "BridgeCallTriggered(address,address,uint256,bytes)"(outbox?: string | null, destAddr?: string | null, amount?: null, data?: null): BridgeCallTriggeredEventFilter;
        BridgeCallTriggered(outbox?: string | null, destAddr?: string | null, amount?: null, data?: null): BridgeCallTriggeredEventFilter;
        "InboxToggle(address,bool)"(inbox?: string | null, enabled?: null): InboxToggleEventFilter;
        InboxToggle(inbox?: string | null, enabled?: null): InboxToggleEventFilter;
        "MessageDelivered(uint256,bytes32,address,uint8,address,bytes32)"(messageIndex?: BigNumberish | null, beforeInboxAcc?: BytesLike | null, inbox?: null, kind?: null, sender?: null, messageDataHash?: null): MessageDeliveredEventFilter;
        MessageDelivered(messageIndex?: BigNumberish | null, beforeInboxAcc?: BytesLike | null, inbox?: null, kind?: null, sender?: null, messageDataHash?: null): MessageDeliveredEventFilter;
        "OutboxToggle(address,bool)"(outbox?: string | null, enabled?: null): OutboxToggleEventFilter;
        OutboxToggle(outbox?: string | null, enabled?: null): OutboxToggleEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        activeOutbox(overrides?: CallOverrides): Promise<BigNumber>;
        allowedInboxList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        allowedInboxes(inbox: string, overrides?: CallOverrides): Promise<BigNumber>;
        allowedOutboxList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        allowedOutboxes(outbox: string, overrides?: CallOverrides): Promise<BigNumber>;
        deliverMessageToInbox(kind: BigNumberish, sender: string, messageDataHash: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        executeCall(destAddr: string, amount: BigNumberish, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        inboxAccs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        messageCount(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setInbox(inbox: string, enabled: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setOutbox(outbox: string, enabled: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        activeOutbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowedInboxList(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowedInboxes(inbox: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowedOutboxList(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowedOutboxes(outbox: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliverMessageToInbox(kind: BigNumberish, sender: string, messageDataHash: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        executeCall(destAddr: string, amount: BigNumberish, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        inboxAccs(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        messageCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setInbox(inbox: string, enabled: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setOutbox(outbox: string, enabled: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
