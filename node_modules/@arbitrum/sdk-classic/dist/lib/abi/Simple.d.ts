import { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';
export interface SimpleInterface extends utils.Interface {
    contractName: 'Simple';
    functions: {
        'checkBlockHashes()': FunctionFragment;
        'counter()': FunctionFragment;
        'emitNullEvent()': FunctionFragment;
        'increment()': FunctionFragment;
        'incrementEmit()': FunctionFragment;
    };
    encodeFunctionData(functionFragment: 'checkBlockHashes', values?: undefined): string;
    encodeFunctionData(functionFragment: 'counter', values?: undefined): string;
    encodeFunctionData(functionFragment: 'emitNullEvent', values?: undefined): string;
    encodeFunctionData(functionFragment: 'increment', values?: undefined): string;
    encodeFunctionData(functionFragment: 'incrementEmit', values?: undefined): string;
    decodeFunctionResult(functionFragment: 'checkBlockHashes', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'counter', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'emitNullEvent', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'increment', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'incrementEmit', data: BytesLike): Result;
    events: {
        'CounterEvent(uint64)': EventFragment;
        'NullEvent()': EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: 'CounterEvent'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'NullEvent'): EventFragment;
}
export declare type CounterEventEvent = TypedEvent<[BigNumber], {
    count: BigNumber;
}>;
export declare type CounterEventEventFilter = TypedEventFilter<CounterEventEvent>;
export declare type NullEventEvent = TypedEvent<[], {}>;
export declare type NullEventEventFilter = TypedEventFilter<NullEventEvent>;
export interface Simple extends BaseContract {
    contractName: 'Simple';
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SimpleInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        checkBlockHashes(overrides?: CallOverrides): Promise<[BigNumber]>;
        counter(overrides?: CallOverrides): Promise<[BigNumber]>;
        emitNullEvent(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        increment(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        incrementEmit(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    checkBlockHashes(overrides?: CallOverrides): Promise<BigNumber>;
    counter(overrides?: CallOverrides): Promise<BigNumber>;
    emitNullEvent(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    increment(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    incrementEmit(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        checkBlockHashes(overrides?: CallOverrides): Promise<BigNumber>;
        counter(overrides?: CallOverrides): Promise<BigNumber>;
        emitNullEvent(overrides?: CallOverrides): Promise<void>;
        increment(overrides?: CallOverrides): Promise<void>;
        incrementEmit(overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        'CounterEvent(uint64)'(count?: null): CounterEventEventFilter;
        CounterEvent(count?: null): CounterEventEventFilter;
        'NullEvent()'(): NullEventEventFilter;
        NullEvent(): NullEventEventFilter;
    };
    estimateGas: {
        checkBlockHashes(overrides?: CallOverrides): Promise<BigNumber>;
        counter(overrides?: CallOverrides): Promise<BigNumber>;
        emitNullEvent(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        increment(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        incrementEmit(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        checkBlockHashes(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        counter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        emitNullEvent(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        increment(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        incrementEmit(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
