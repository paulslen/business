import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface ArbOwnerInterface extends utils.Interface {
    contractName: "ArbOwner";
    functions: {
        "addAllowedSender(address)": FunctionFragment;
        "addChainOwner(address)": FunctionFragment;
        "addMappingException(uint256,uint256)": FunctionFragment;
        "addToReserveFunds()": FunctionFragment;
        "allowAllSenders()": FunctionFragment;
        "allowOnlyOwnerToSend()": FunctionFragment;
        "continueCodeUpload(bytes)": FunctionFragment;
        "createChainParameter(bytes32,uint256)": FunctionFragment;
        "deployContract(bytes,address,uint256)": FunctionFragment;
        "finishCodeUploadAsArbosUpgrade(bytes32,bytes32)": FunctionFragment;
        "getAllAllowedSenders()": FunctionFragment;
        "getAllChainOwners()": FunctionFragment;
        "getAllFairGasPriceSenders()": FunctionFragment;
        "getAllMappingExceptions()": FunctionFragment;
        "getChainParameter(bytes32)": FunctionFragment;
        "getLastUpgradeHash()": FunctionFragment;
        "getTotalOfEthBalances()": FunctionFragment;
        "getUploadedCodeHash()": FunctionFragment;
        "isAllowedSender(address)": FunctionFragment;
        "isChainOwner(address)": FunctionFragment;
        "isFairGasPriceSender(address)": FunctionFragment;
        "isMappingException(uint256,uint256)": FunctionFragment;
        "removeAllowedSender(address)": FunctionFragment;
        "removeChainOwner(address)": FunctionFragment;
        "removeMappingException(uint256,uint256)": FunctionFragment;
        "serializeAllParameters()": FunctionFragment;
        "setChainParameter(bytes32,uint256)": FunctionFragment;
        "setFairGasPriceSender(address,bool)": FunctionFragment;
        "setL1GasPriceEstimate(uint256)": FunctionFragment;
        "startCodeUpload()": FunctionFragment;
        "startCodeUploadWithCheck(bytes32)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "addAllowedSender", values: [string]): string;
    encodeFunctionData(functionFragment: "addChainOwner", values: [string]): string;
    encodeFunctionData(functionFragment: "addMappingException", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "addToReserveFunds", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowAllSenders", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowOnlyOwnerToSend", values?: undefined): string;
    encodeFunctionData(functionFragment: "continueCodeUpload", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "createChainParameter", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "deployContract", values: [BytesLike, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "finishCodeUploadAsArbosUpgrade", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "getAllAllowedSenders", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAllChainOwners", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAllFairGasPriceSenders", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAllMappingExceptions", values?: undefined): string;
    encodeFunctionData(functionFragment: "getChainParameter", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getLastUpgradeHash", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTotalOfEthBalances", values?: undefined): string;
    encodeFunctionData(functionFragment: "getUploadedCodeHash", values?: undefined): string;
    encodeFunctionData(functionFragment: "isAllowedSender", values: [string]): string;
    encodeFunctionData(functionFragment: "isChainOwner", values: [string]): string;
    encodeFunctionData(functionFragment: "isFairGasPriceSender", values: [string]): string;
    encodeFunctionData(functionFragment: "isMappingException", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "removeAllowedSender", values: [string]): string;
    encodeFunctionData(functionFragment: "removeChainOwner", values: [string]): string;
    encodeFunctionData(functionFragment: "removeMappingException", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "serializeAllParameters", values?: undefined): string;
    encodeFunctionData(functionFragment: "setChainParameter", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setFairGasPriceSender", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setL1GasPriceEstimate", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "startCodeUpload", values?: undefined): string;
    encodeFunctionData(functionFragment: "startCodeUploadWithCheck", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "addAllowedSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addChainOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addMappingException", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addToReserveFunds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowAllSenders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowOnlyOwnerToSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "continueCodeUpload", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createChainParameter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finishCodeUploadAsArbosUpgrade", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllAllowedSenders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllChainOwners", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllFairGasPriceSenders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllMappingExceptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getChainParameter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLastUpgradeHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTotalOfEthBalances", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUploadedCodeHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAllowedSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isChainOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isFairGasPriceSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isMappingException", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeAllowedSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeChainOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeMappingException", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "serializeAllParameters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setChainParameter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFairGasPriceSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setL1GasPriceEstimate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "startCodeUpload", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "startCodeUploadWithCheck", data: BytesLike): Result;
    events: {};
}
export interface ArbOwner extends BaseContract {
    contractName: "ArbOwner";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ArbOwnerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addAllowedSender(addr: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        addChainOwner(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        addMappingException(from: BigNumberish, to: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        addToReserveFunds(overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        allowAllSenders(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        allowOnlyOwnerToSend(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        continueCodeUpload(marshalledCode: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        createChainParameter(which: BytesLike, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        deployContract(constructorData: BytesLike, deemedSender: string, deemedNonce: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        finishCodeUploadAsArbosUpgrade(newCodeHash: BytesLike, oldCodeHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getAllAllowedSenders(overrides?: CallOverrides): Promise<[string]>;
        getAllChainOwners(overrides?: CallOverrides): Promise<[string]>;
        getAllFairGasPriceSenders(overrides?: CallOverrides): Promise<[string]>;
        getAllMappingExceptions(overrides?: CallOverrides): Promise<[string]>;
        getChainParameter(which: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;
        getLastUpgradeHash(overrides?: CallOverrides): Promise<[string]>;
        getTotalOfEthBalances(overrides?: CallOverrides): Promise<[BigNumber]>;
        getUploadedCodeHash(overrides?: CallOverrides): Promise<[string]>;
        isAllowedSender(addr: string, overrides?: CallOverrides): Promise<[boolean]>;
        isChainOwner(addr: string, overrides?: CallOverrides): Promise<[boolean]>;
        isFairGasPriceSender(addr: string, overrides?: CallOverrides): Promise<[boolean]>;
        isMappingException(from: BigNumberish, to: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;
        removeAllowedSender(addr: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        removeChainOwner(ownerToRemove: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        removeMappingException(from: BigNumberish, to: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        serializeAllParameters(overrides?: CallOverrides): Promise<[string]>;
        setChainParameter(which: BytesLike, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setFairGasPriceSender(addr: string, isFairGasPriceSender: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setL1GasPriceEstimate(priceInGwei: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        startCodeUpload(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        startCodeUploadWithCheck(oldCodeHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    addAllowedSender(addr: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    addChainOwner(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    addMappingException(from: BigNumberish, to: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    addToReserveFunds(overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    allowAllSenders(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    allowOnlyOwnerToSend(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    continueCodeUpload(marshalledCode: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    createChainParameter(which: BytesLike, value: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    deployContract(constructorData: BytesLike, deemedSender: string, deemedNonce: BigNumberish, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    finishCodeUploadAsArbosUpgrade(newCodeHash: BytesLike, oldCodeHash: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getAllAllowedSenders(overrides?: CallOverrides): Promise<string>;
    getAllChainOwners(overrides?: CallOverrides): Promise<string>;
    getAllFairGasPriceSenders(overrides?: CallOverrides): Promise<string>;
    getAllMappingExceptions(overrides?: CallOverrides): Promise<string>;
    getChainParameter(which: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    getLastUpgradeHash(overrides?: CallOverrides): Promise<string>;
    getTotalOfEthBalances(overrides?: CallOverrides): Promise<BigNumber>;
    getUploadedCodeHash(overrides?: CallOverrides): Promise<string>;
    isAllowedSender(addr: string, overrides?: CallOverrides): Promise<boolean>;
    isChainOwner(addr: string, overrides?: CallOverrides): Promise<boolean>;
    isFairGasPriceSender(addr: string, overrides?: CallOverrides): Promise<boolean>;
    isMappingException(from: BigNumberish, to: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    removeAllowedSender(addr: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    removeChainOwner(ownerToRemove: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    removeMappingException(from: BigNumberish, to: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    serializeAllParameters(overrides?: CallOverrides): Promise<string>;
    setChainParameter(which: BytesLike, value: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setFairGasPriceSender(addr: string, isFairGasPriceSender: boolean, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setL1GasPriceEstimate(priceInGwei: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    startCodeUpload(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    startCodeUploadWithCheck(oldCodeHash: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addAllowedSender(addr: string, overrides?: CallOverrides): Promise<void>;
        addChainOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;
        addMappingException(from: BigNumberish, to: BigNumberish, overrides?: CallOverrides): Promise<void>;
        addToReserveFunds(overrides?: CallOverrides): Promise<void>;
        allowAllSenders(overrides?: CallOverrides): Promise<void>;
        allowOnlyOwnerToSend(overrides?: CallOverrides): Promise<void>;
        continueCodeUpload(marshalledCode: BytesLike, overrides?: CallOverrides): Promise<void>;
        createChainParameter(which: BytesLike, value: BigNumberish, overrides?: CallOverrides): Promise<void>;
        deployContract(constructorData: BytesLike, deemedSender: string, deemedNonce: BigNumberish, overrides?: CallOverrides): Promise<string>;
        finishCodeUploadAsArbosUpgrade(newCodeHash: BytesLike, oldCodeHash: BytesLike, overrides?: CallOverrides): Promise<void>;
        getAllAllowedSenders(overrides?: CallOverrides): Promise<string>;
        getAllChainOwners(overrides?: CallOverrides): Promise<string>;
        getAllFairGasPriceSenders(overrides?: CallOverrides): Promise<string>;
        getAllMappingExceptions(overrides?: CallOverrides): Promise<string>;
        getChainParameter(which: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getLastUpgradeHash(overrides?: CallOverrides): Promise<string>;
        getTotalOfEthBalances(overrides?: CallOverrides): Promise<BigNumber>;
        getUploadedCodeHash(overrides?: CallOverrides): Promise<string>;
        isAllowedSender(addr: string, overrides?: CallOverrides): Promise<boolean>;
        isChainOwner(addr: string, overrides?: CallOverrides): Promise<boolean>;
        isFairGasPriceSender(addr: string, overrides?: CallOverrides): Promise<boolean>;
        isMappingException(from: BigNumberish, to: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        removeAllowedSender(addr: string, overrides?: CallOverrides): Promise<void>;
        removeChainOwner(ownerToRemove: string, overrides?: CallOverrides): Promise<void>;
        removeMappingException(from: BigNumberish, to: BigNumberish, overrides?: CallOverrides): Promise<void>;
        serializeAllParameters(overrides?: CallOverrides): Promise<string>;
        setChainParameter(which: BytesLike, value: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setFairGasPriceSender(addr: string, isFairGasPriceSender: boolean, overrides?: CallOverrides): Promise<void>;
        setL1GasPriceEstimate(priceInGwei: BigNumberish, overrides?: CallOverrides): Promise<void>;
        startCodeUpload(overrides?: CallOverrides): Promise<void>;
        startCodeUploadWithCheck(oldCodeHash: BytesLike, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        addAllowedSender(addr: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        addChainOwner(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        addMappingException(from: BigNumberish, to: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        addToReserveFunds(overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        allowAllSenders(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        allowOnlyOwnerToSend(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        continueCodeUpload(marshalledCode: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        createChainParameter(which: BytesLike, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        deployContract(constructorData: BytesLike, deemedSender: string, deemedNonce: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        finishCodeUploadAsArbosUpgrade(newCodeHash: BytesLike, oldCodeHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getAllAllowedSenders(overrides?: CallOverrides): Promise<BigNumber>;
        getAllChainOwners(overrides?: CallOverrides): Promise<BigNumber>;
        getAllFairGasPriceSenders(overrides?: CallOverrides): Promise<BigNumber>;
        getAllMappingExceptions(overrides?: CallOverrides): Promise<BigNumber>;
        getChainParameter(which: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getLastUpgradeHash(overrides?: CallOverrides): Promise<BigNumber>;
        getTotalOfEthBalances(overrides?: CallOverrides): Promise<BigNumber>;
        getUploadedCodeHash(overrides?: CallOverrides): Promise<BigNumber>;
        isAllowedSender(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
        isChainOwner(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
        isFairGasPriceSender(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
        isMappingException(from: BigNumberish, to: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        removeAllowedSender(addr: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        removeChainOwner(ownerToRemove: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        removeMappingException(from: BigNumberish, to: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        serializeAllParameters(overrides?: CallOverrides): Promise<BigNumber>;
        setChainParameter(which: BytesLike, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setFairGasPriceSender(addr: string, isFairGasPriceSender: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setL1GasPriceEstimate(priceInGwei: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        startCodeUpload(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        startCodeUploadWithCheck(oldCodeHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addAllowedSender(addr: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        addChainOwner(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        addMappingException(from: BigNumberish, to: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        addToReserveFunds(overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        allowAllSenders(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        allowOnlyOwnerToSend(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        continueCodeUpload(marshalledCode: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        createChainParameter(which: BytesLike, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        deployContract(constructorData: BytesLike, deemedSender: string, deemedNonce: BigNumberish, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        finishCodeUploadAsArbosUpgrade(newCodeHash: BytesLike, oldCodeHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getAllAllowedSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAllChainOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAllFairGasPriceSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAllMappingExceptions(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getChainParameter(which: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getLastUpgradeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTotalOfEthBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUploadedCodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAllowedSender(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isChainOwner(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isFairGasPriceSender(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isMappingException(from: BigNumberish, to: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeAllowedSender(addr: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        removeChainOwner(ownerToRemove: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        removeMappingException(from: BigNumberish, to: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        serializeAllParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setChainParameter(which: BytesLike, value: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setFairGasPriceSender(addr: string, isFairGasPriceSender: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setL1GasPriceEstimate(priceInGwei: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        startCodeUpload(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        startCodeUploadWithCheck(oldCodeHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
