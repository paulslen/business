import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface NodeInterfaceInterface extends utils.Interface {
    contractName: "NodeInterface";
    functions: {
        "estimateRetryableTicket(address,uint256,address,uint256,uint256,address,address,uint256,uint256,bytes)": FunctionFragment;
        "lookupMessageBatchProof(uint256,uint64)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "estimateRetryableTicket", values: [
        string,
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish,
        string,
        string,
        BigNumberish,
        BigNumberish,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "lookupMessageBatchProof", values: [BigNumberish, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "estimateRetryableTicket", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lookupMessageBatchProof", data: BytesLike): Result;
    events: {};
}
export interface NodeInterface extends BaseContract {
    contractName: "NodeInterface";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: NodeInterfaceInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        estimateRetryableTicket(sender: string, deposit: BigNumberish, destAddr: string, l2CallValue: BigNumberish, maxSubmissionCost: BigNumberish, excessFeeRefundAddress: string, callValueRefundAddress: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        lookupMessageBatchProof(batchNum: BigNumberish, index: BigNumberish, overrides?: CallOverrides): Promise<[
            string[],
            BigNumber,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
        ] & {
            proof: string[];
            path: BigNumber;
            l2Sender: string;
            l1Dest: string;
            l2Block: BigNumber;
            l1Block: BigNumber;
            timestamp: BigNumber;
            amount: BigNumber;
            calldataForL1: string;
        }>;
    };
    estimateRetryableTicket(sender: string, deposit: BigNumberish, destAddr: string, l2CallValue: BigNumberish, maxSubmissionCost: BigNumberish, excessFeeRefundAddress: string, callValueRefundAddress: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
    lookupMessageBatchProof(batchNum: BigNumberish, index: BigNumberish, overrides?: CallOverrides): Promise<[
        string[],
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
    ] & {
        proof: string[];
        path: BigNumber;
        l2Sender: string;
        l1Dest: string;
        l2Block: BigNumber;
        l1Block: BigNumber;
        timestamp: BigNumber;
        amount: BigNumber;
        calldataForL1: string;
    }>;
    callStatic: {
        estimateRetryableTicket(sender: string, deposit: BigNumberish, destAddr: string, l2CallValue: BigNumberish, maxSubmissionCost: BigNumberish, excessFeeRefundAddress: string, callValueRefundAddress: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        lookupMessageBatchProof(batchNum: BigNumberish, index: BigNumberish, overrides?: CallOverrides): Promise<[
            string[],
            BigNumber,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string
        ] & {
            proof: string[];
            path: BigNumber;
            l2Sender: string;
            l1Dest: string;
            l2Block: BigNumber;
            l1Block: BigNumber;
            timestamp: BigNumber;
            amount: BigNumber;
            calldataForL1: string;
        }>;
    };
    filters: {};
    estimateGas: {
        estimateRetryableTicket(sender: string, deposit: BigNumberish, destAddr: string, l2CallValue: BigNumberish, maxSubmissionCost: BigNumberish, excessFeeRefundAddress: string, callValueRefundAddress: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        lookupMessageBatchProof(batchNum: BigNumberish, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        estimateRetryableTicket(sender: string, deposit: BigNumberish, destAddr: string, l2CallValue: BigNumberish, maxSubmissionCost: BigNumberish, excessFeeRefundAddress: string, callValueRefundAddress: string, maxGas: BigNumberish, gasPriceBid: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lookupMessageBatchProof(batchNum: BigNumberish, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
