import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface OneStepProofTesterInterface extends utils.Interface {
    contractName: "OneStepProofTester";
    functions: {
        "executeStepTest(address,address,address,uint256,bytes32[2],bytes,bytes)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "executeStepTest", values: [
        string,
        string,
        string,
        BigNumberish,
        [
            BytesLike,
            BytesLike
        ],
        BytesLike,
        BytesLike
    ]): string;
    decodeFunctionResult(functionFragment: "executeStepTest", data: BytesLike): Result;
    events: {
        "OneStepProofResult(uint64,uint256,bytes32[4])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OneStepProofResult"): EventFragment;
}
export declare type OneStepProofResultEvent = TypedEvent<[
    BigNumber,
    BigNumber,
    [string, string, string, string]
], {
    gas: BigNumber;
    totalMessagesRead: BigNumber;
    fields: [string, string, string, string];
}>;
export declare type OneStepProofResultEventFilter = TypedEventFilter<OneStepProofResultEvent>;
export interface OneStepProofTester extends BaseContract {
    contractName: "OneStepProofTester";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OneStepProofTesterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        executeStepTest(executor: string, sequencerBridge: string, bridge: string, initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    executeStepTest(executor: string, sequencerBridge: string, bridge: string, initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        executeStepTest(executor: string, sequencerBridge: string, bridge: string, initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OneStepProofResult(uint64,uint256,bytes32[4])"(gas?: null, totalMessagesRead?: null, fields?: null): OneStepProofResultEventFilter;
        OneStepProofResult(gas?: null, totalMessagesRead?: null, fields?: null): OneStepProofResultEventFilter;
    };
    estimateGas: {
        executeStepTest(executor: string, sequencerBridge: string, bridge: string, initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        executeStepTest(executor: string, sequencerBridge: string, bridge: string, initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
