import { Provider } from '@ethersproject/abstract-provider';
import { BigNumber } from '@ethersproject/bignumber';
/**
 * An optional big number percentage increase
 */
export declare type PercentIncrease = {
    /**
     * If provided, will override the estimated base
     */
    base?: BigNumber;
    /**
     * How much to increase the base by. If not provided system defaults may be used.
     */
    percentIncrease?: BigNumber;
};
export interface GasOverrides {
    maxGas?: PercentIncrease & {
        /**
         * Set a minimum max gas
         */
        min?: BigNumber;
    };
    maxSubmissionPrice?: PercentIncrease;
    maxGasPrice?: PercentIncrease;
    sendL2CallValueFromL1?: boolean;
}
export interface L1toL2MessageGasValues {
    maxGasPriceBid: BigNumber;
    maxSubmissionPriceBid: BigNumber;
    maxGasBid: BigNumber;
    totalDepositValue: BigNumber;
    l2CallValue: BigNumber;
}
export declare class L1ToL2MessageGasEstimator {
    readonly l2Provider: Provider;
    constructor(l2Provider: Provider);
    private percentIncrease;
    private applySubmissionPriceDefaults;
    /**
     * Return the price, in wei, of submitting a new retryable tx with a given calldata size.
     * @param callDataSize
     * @param options
     * @returns
     */
    estimateSubmissionPrice(callDataSize: BigNumber | number, options?: {
        base?: BigNumber;
        percentIncrease?: BigNumber;
    }): Promise<{
        submissionPrice: BigNumber;
        nextUpdateTimestamp: BigNumber;
    }>;
    /**
     * Estimate the amount of L2 gas required for putting the transaction in the L2 inbox, and executing it.
     * @param sender
     * @param senderDeposit
     * @param destAddr
     * @param l2CallValue
     * @param maxSubmissionCost
     * @param excessFeeRefundAddress
     * @param callValueRefundAddress
     * @param maxGas
     * @param gasPriceBid
     * @param calldata
     * @returns
     */
    estimateRetryableTicketMaxGas(sender: string, senderDeposit: BigNumber, destAddr: string, l2CallValue: BigNumber, maxSubmissionCost: BigNumber, excessFeeRefundAddress: string, callValueRefundAddress: string, maxGas: BigNumber, gasPriceBid: BigNumber, calldata: string): Promise<BigNumber>;
    private applyDefaults;
    /**
     * Get gas limit, gas price and submission price estimates for sending an L2 message
     * @param sender Sender of the L1 to L2 transaction
     * @param destAddr Destination L2 contract address
     * @param l2CallDataHex The call data to be sent in the request
     * @param l2CallValue The value to be sent on L2 as part of the L2 transaction
     * @param options
     * @returns
     */
    estimateMessage(sender: string, destAddr: string, l2CallDataHex: string, l2CallValue: BigNumber, options?: GasOverrides): Promise<{
        maxGasBid: BigNumber;
        maxSubmissionPriceBid: BigNumber;
        maxGasPriceBid: BigNumber;
        totalDepositValue: BigNumber;
    }>;
}
