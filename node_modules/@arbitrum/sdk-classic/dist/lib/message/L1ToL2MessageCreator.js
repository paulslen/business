"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.L1ToL2MessageCreator = void 0;
const L1ToL2MessageGasEstimator_1 = require("./L1ToL2MessageGasEstimator");
const L1Transaction_1 = require("./L1Transaction");
const Inbox__factory_1 = require("../abi/factories/Inbox__factory");
const networks_1 = require("../dataEntities/networks");
class L1ToL2MessageCreator {
    constructor(l1Signer) {
        this.l1Signer = l1Signer;
    }
    async createRetryableTicketFromGasParams(gasParams, destAddr, callDataHex, l2ChainID, options = {
        excessFeeRefundAddress: undefined,
        callValueRefundAddress: undefined,
    }, overrides = {}) {
        const { maxGasPriceBid, maxSubmissionPriceBid, maxGasBid, totalDepositValue, l2CallValue, } = gasParams;
        const sender = await this.getSender();
        const excessFeeRefundAddress = options.excessFeeRefundAddress || sender;
        const callValueRefundAddress = options.callValueRefundAddress || sender;
        const inboxAddress = networks_1.l2Networks[l2ChainID].ethBridge.inbox;
        const inbox = Inbox__factory_1.Inbox__factory.connect(inboxAddress, this.l1Signer);
        const res = await inbox.createRetryableTicket(destAddr, l2CallValue, maxSubmissionPriceBid, excessFeeRefundAddress, callValueRefundAddress, maxGasBid, maxGasPriceBid, callDataHex, Object.assign({ value: totalDepositValue }, overrides));
        return res.wait();
    }
    async createRetryableTicket(destAddr, callDataHex, l2CallValue, l2Provider, options = {
        excessFeeRefundAddress: undefined,
        callValueRefundAddress: undefined,
    }) {
        const sender = await this.getSender();
        const gasEstimator = new L1ToL2MessageGasEstimator_1.L1ToL2MessageGasEstimator(l2Provider);
        const gasParams = await gasEstimator.estimateMessage(sender, destAddr, callDataHex, l2CallValue);
        const l2ChainID = (await l2Provider.getNetwork()).chainId;
        const rec = await this.createRetryableTicketFromGasParams(Object.assign(Object.assign({}, gasParams), { l2CallValue }), destAddr, callDataHex, l2ChainID, options);
        return new L1Transaction_1.L1TransactionReceipt(rec);
    }
    async getSender() {
        if (!this.sender) {
            const sender = await this.l1Signer.getAddress();
            this.sender = sender;
            return sender;
        }
        return this.sender;
    }
}
exports.L1ToL2MessageCreator = L1ToL2MessageCreator;
