/*
 * Copyright 2021, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-env node */
'use strict';
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.L1ContractCallTransactionReceipt = exports.L1EthDepositTransactionReceipt = exports.L1TransactionReceipt = void 0;
const bignumber_1 = require("@ethersproject/bignumber");
const L1ToL2Message_1 = require("./L1ToL2Message");
const L1ERC20Gateway__factory_1 = require("../abi/factories/L1ERC20Gateway__factory");
const Bridge__factory_1 = require("../abi/factories/Bridge__factory");
const signerOrProvider_1 = require("../dataEntities/signerOrProvider");
const errors_1 = require("../dataEntities/errors");
class L1TransactionReceipt {
    constructor(tx) {
        this.to = tx.to;
        this.from = tx.from;
        this.contractAddress = tx.contractAddress;
        this.transactionIndex = tx.transactionIndex;
        this.root = tx.root;
        this.gasUsed = tx.gasUsed;
        this.logsBloom = tx.logsBloom;
        this.blockHash = tx.blockHash;
        this.transactionHash = tx.transactionHash;
        this.logs = tx.logs;
        this.blockNumber = tx.blockNumber;
        this.confirmations = tx.confirmations;
        this.cumulativeGasUsed = tx.cumulativeGasUsed;
        this.effectiveGasPrice = tx.effectiveGasPrice;
        this.byzantium = tx.byzantium;
        this.type = tx.type;
        this.status = tx.status;
    }
    /**
     * Get the numbers of any messages created by this transaction
     * @returns
     */
    getMessages() {
        const iface = Bridge__factory_1.Bridge__factory.createInterface();
        const messageDeliveredTopic = iface.getEventTopic(iface.getEvent('MessageDelivered'));
        return this.logs
            .filter(log => log.topics[0] === messageDeliveredTopic)
            .map(l => iface.parseLog(l).args);
    }
    async getL1ToL2Messages(l2SignerOrProvider) {
        const provider = signerOrProvider_1.SignerProviderUtils.getProviderOrThrow(l2SignerOrProvider);
        const chainID = (await provider.getNetwork()).chainId.toString();
        const messages = this.getMessages();
        if (!messages || messages.length === 0)
            return [];
        return messages
            .map(m => m.messageIndex)
            .map(mn => {
            const ticketCreationHash = L1ToL2Message_1.L1ToL2Message.calculateRetryableCreationId(bignumber_1.BigNumber.from(chainID), mn);
            return L1ToL2Message_1.L1ToL2Message.fromRetryableCreationId(l2SignerOrProvider, ticketCreationHash, mn);
        });
    }
    async getL1ToL2Message(l2SignerOrProvider, messageIndex) {
        const allL1ToL2Messages = await this.getL1ToL2Messages(l2SignerOrProvider);
        const messageCount = allL1ToL2Messages.length;
        if (!messageCount)
            throw new errors_1.ArbTsError(`No l1 to L2 message found for ${this.transactionHash}`);
        if (messageIndex !== undefined && messageIndex >= messageCount)
            throw new errors_1.ArbTsError(`Provided message number out of range for ${this.transactionHash}; index was ${messageIndex}, but only ${messageCount} messages`);
        if (messageIndex === undefined && messageCount > 1)
            throw new errors_1.ArbTsError(`${messageCount} L2 messages for ${this.transactionHash}; must provide messageNumberIndex (or use (signersAndProviders, l1Txn))`);
        return allL1ToL2Messages[messageIndex || 0];
    }
    /**
     * Get any token deposit events created by this transaction
     * @returns
     */
    getTokenDepositEvents() {
        const iface = L1ERC20Gateway__factory_1.L1ERC20Gateway__factory.createInterface();
        const event = iface.getEvent('DepositInitiated');
        const eventTopic = iface.getEventTopic(event);
        const logs = this.logs.filter(log => log.topics[0] === eventTopic);
        return logs.map(log => iface.parseLog(log).args);
    }
}
exports.L1TransactionReceipt = L1TransactionReceipt;
_a = L1TransactionReceipt;
/**
 * Replaces the wait function with one that returns an L1TransactionReceipt
 * @param contractTransaction
 * @returns
 */
L1TransactionReceipt.monkeyPatchWait = (contractTransaction) => {
    const wait = contractTransaction.wait;
    contractTransaction.wait = async (confirmations) => {
        const result = await wait(confirmations);
        return new L1TransactionReceipt(result);
    };
    return contractTransaction;
};
/**
 * Replaces the wait function with one that returns an L1EthDepositTransactionReceipt
 * @param contractTransaction
 * @returns
 */
L1TransactionReceipt.monkeyPatchEthDepositWait = (contractTransaction) => {
    const wait = contractTransaction.wait;
    contractTransaction.wait = async (confirmations) => {
        const result = await wait(confirmations);
        return new L1EthDepositTransactionReceipt(result);
    };
    return contractTransaction;
};
/**
 * Replaces the wait function with one that returns an L1ContractCallTransactionReceipt
 * @param contractTransaction
 * @returns
 */
L1TransactionReceipt.monkeyPatchContractCallWait = (contractTransaction) => {
    const wait = contractTransaction.wait;
    contractTransaction.wait = async (confirmations) => {
        const result = await wait(confirmations);
        return new L1ContractCallTransactionReceipt(result);
    };
    return contractTransaction;
};
/**
 * An L1TransactionReceipt with additional functionality that only exists
 * if the transaction created a single eth deposit.
 */
class L1EthDepositTransactionReceipt extends L1TransactionReceipt {
    /**
     * Wait for the funds to arrive on L2
     * @param confirmations Amount of confirmations the retryable ticket and the auto redeem receipt should have
     * @param timeout Amount of time to wait for the retryable ticket to be created
     * Defaults to 15 minutes, as by this time all transactions are expected to be included on L2. Throws on timeout.
     * @returns The wait result contains `complete`, a `status`, the L1ToL2Message and optionally the `l2TxReceipt`
     * If `complete` is true then this message is in the terminal state.
     * For eth deposits complete this is when the status is FUNDS_DEPOSITED, EXPIRED or REDEEMED.
     */
    async waitForL2(l2SignerOrProvider, confirmations, timeout = 900000) {
        const message = (await this.getL1ToL2Messages(l2SignerOrProvider))[0];
        const res = await message.waitForStatus(confirmations, timeout);
        return Object.assign(Object.assign({ complete: res.status === L1ToL2Message_1.L1ToL2MessageStatus.FUNDS_DEPOSITED_ON_L2 ||
                res.status === L1ToL2Message_1.L1ToL2MessageStatus.EXPIRED ||
                res.status === L1ToL2Message_1.L1ToL2MessageStatus.REDEEMED }, res), { message });
    }
}
exports.L1EthDepositTransactionReceipt = L1EthDepositTransactionReceipt;
/**
 * An L1TransactionReceipt with additional functionality that only exists
 * if the transaction created a single call to an L2 contract - this includes
 * token deposits.
 */
class L1ContractCallTransactionReceipt extends L1TransactionReceipt {
    /**
     * Wait for the transaction to arrive and be executed on L2
     * @param confirmations Amount of confirmations the retryable ticket and the auto redeem receipt should have
     * @param timeout Amount of time to wait for the retryable ticket to be created
     * Defaults to 15 minutes, as by this time all transactions are expected to be included on L2. Throws on timeout.
     * @returns The wait result contains `complete`, a `status`, an L1ToL2Message and optionally the `l2TxReceipt`.
     * If `complete` is true then this message is in the terminal state.
     * For contract calls this is true only if the status is REDEEMED.
     */
    async waitForL2(l2SignerOrProvider, confirmations, timeout = 900000) {
        const message = (await this.getL1ToL2Messages(l2SignerOrProvider))[0];
        const res = await message.waitForStatus(confirmations, timeout);
        return Object.assign(Object.assign({ complete: res.status === L1ToL2Message_1.L1ToL2MessageStatus.REDEEMED }, res), { message });
    }
}
exports.L1ContractCallTransactionReceipt = L1ContractCallTransactionReceipt;
