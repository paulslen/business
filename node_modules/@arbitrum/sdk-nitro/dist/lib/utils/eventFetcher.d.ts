import { Provider, BlockTag } from '@ethersproject/abstract-provider';
import { Contract, Event } from '@ethersproject/contracts';
import { TypedEvent, TypedEventFilter } from '../abi/common';
export declare type FetchedEvent<TEvent extends Event> = {
    event: TEvent['args'];
    topic: string;
    name: string;
    blockNumber: number;
    blockHash: string;
    transactionHash: string;
    address: string;
    topics: string[];
    data: string;
};
declare type TEventOf<T> = T extends TypedEventFilter<infer TEvent> ? TEvent : never;
/**
 * Fetches and parses blockchain logs
 */
export declare class EventFetcher {
    readonly provider: Provider;
    constructor(provider: Provider);
    /**
     * Fetch logs and parse logs
     * @param addr The address of the contract emitting the events
     * @param contractFactory A contract factory for generating a contract of type TContract at the addr
     * @param topicGenerator Generator function for creating
     * @param filter Block filter parameters
     * @returns
     */
    getEvents<TContract extends Contract, TEventFilter extends TypedEventFilter<TypedEvent>>(addr: string, contractFactory: {
        connect(address: string, provider: Provider): TContract;
    }, topicGenerator: (t: TContract) => TEventFilter, filter: {
        fromBlock: BlockTag;
        toBlock: BlockTag;
    }): Promise<FetchedEvent<TEventOf<TEventFilter>>[]>;
}
export {};
