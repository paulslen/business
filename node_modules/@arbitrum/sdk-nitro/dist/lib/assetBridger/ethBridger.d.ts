import { Signer } from '@ethersproject/abstract-signer';
import { PayableOverrides } from '@ethersproject/contracts';
import { BigNumber } from 'ethers';
import { AssetBridger } from './assetBridger';
import { L1EthDepositTransaction } from '../message/L1Transaction';
import { L2ContractTransaction } from '../message/L2Transaction';
export interface EthWithdrawParams {
    /**
     * L2 signer who is sending the assets
     */
    l2Signer: Signer;
    /**
     * The amount of ETH or tokens to be withdrawn
     */
    amount: BigNumber;
    /**
     * The L1 address to receive the value. Defaults to l2Signer's address
     */
    destinationAddress?: string;
    /**
     * Transaction overrides
     */
    overrides?: PayableOverrides;
}
export declare type EthDepositParams = {
    /**
     * The L1 entity depositing the assets
     */
    l1Signer: Signer;
    /**
     * The amount of ETH or tokens to be deposited
     */
    amount: BigNumber;
    /**
     * Transaction overrides
     */
    overrides?: PayableOverrides;
};
/**
 * Bridger for moving ETH back and forth betwen L1 to L2
 */
export declare class EthBridger extends AssetBridger<EthDepositParams, EthWithdrawParams> {
    private depositTxOrGas;
    /**
     * Estimate gas for depositing ETH from L1 onto L2
     * @param params
     * @returns
     */
    depositEstimateGas(params: EthDepositParams): Promise<BigNumber>;
    /**
     * Deposit ETH from L1 onto L2
     * @param params
     * @returns
     */
    deposit(params: EthDepositParams): Promise<L1EthDepositTransaction>;
    private withdrawTxOrGas;
    /**
     * Estimate gas for withdrawing ETH from L2 onto L1
     * @param params
     * @returns
     */
    withdrawEstimateGas(params: EthWithdrawParams): Promise<BigNumber>;
    /**
     * Withdraw ETH from L2 onto L1
     * @param params
     * @returns
     */
    withdraw(params: EthWithdrawParams): Promise<L2ContractTransaction>;
}
