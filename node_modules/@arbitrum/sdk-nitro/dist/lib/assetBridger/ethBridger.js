/*
 * Copyright 2021, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-env node */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthBridger = void 0;
const Inbox__factory_1 = require("../abi/factories/Inbox__factory");
const ArbSys__factory_1 = require("../abi/factories/ArbSys__factory");
const constants_1 = require("../dataEntities/constants");
const signerOrProvider_1 = require("../dataEntities/signerOrProvider");
const errors_1 = require("../dataEntities/errors");
const assetBridger_1 = require("./assetBridger");
const L1Transaction_1 = require("../message/L1Transaction");
const L2Transaction_1 = require("../message/L2Transaction");
/**
 * Bridger for moving ETH back and forth betwen L1 to L2
 */
class EthBridger extends assetBridger_1.AssetBridger {
    async depositTxOrGas(params, estimate) {
        if (!signerOrProvider_1.SignerProviderUtils.signerHasProvider(params.l1Signer)) {
            throw new errors_1.MissingProviderArbSdkError('l1Signer');
        }
        await this.checkL1Network(params.l1Signer);
        const inbox = Inbox__factory_1.Inbox__factory.connect(this.l2Network.ethBridge.inbox, params.l1Signer);
        return (estimate ? inbox.estimateGas : inbox.functions)['depositEth()'](Object.assign({ value: params.amount }, (params.overrides || {})));
    }
    /**
     * Estimate gas for depositing ETH from L1 onto L2
     * @param params
     * @returns
     */
    async depositEstimateGas(params) {
        return this.depositTxOrGas(params, true);
    }
    /**
     * Deposit ETH from L1 onto L2
     * @param params
     * @returns
     */
    async deposit(params) {
        const tx = await this.depositTxOrGas(params, false);
        return L1Transaction_1.L1TransactionReceipt.monkeyPatchEthDepositWait(tx);
    }
    async withdrawTxOrGas(params, estimate) {
        if (!signerOrProvider_1.SignerProviderUtils.signerHasProvider(params.l2Signer)) {
            throw new errors_1.MissingProviderArbSdkError('l2Signer');
        }
        await this.checkL2Network(params.l2Signer);
        const addr = params.destinationAddress || (await params.l2Signer.getAddress());
        const arbSys = ArbSys__factory_1.ArbSys__factory.connect(constants_1.ARB_SYS_ADDRESS, params.l2Signer);
        return (estimate ? arbSys.estimateGas : arbSys.functions).withdrawEth(addr, Object.assign({ value: params.amount }, (params.overrides || {})));
    }
    /**
     * Estimate gas for withdrawing ETH from L2 onto L1
     * @param params
     * @returns
     */
    async withdrawEstimateGas(params) {
        return await this.withdrawTxOrGas(params, true);
    }
    /**
     * Withdraw ETH from L2 onto L1
     * @param params
     * @returns
     */
    async withdraw(params) {
        const tx = await this.withdrawTxOrGas(params, false);
        return L2Transaction_1.L2TransactionReceipt.monkeyPatchWait(tx);
    }
}
exports.EthBridger = EthBridger;
