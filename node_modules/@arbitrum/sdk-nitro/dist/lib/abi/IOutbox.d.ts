import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface IOutboxInterface extends utils.Interface {
    contractName: "IOutbox";
    functions: {
        "l2ToL1BatchNum()": FunctionFragment;
        "l2ToL1Block()": FunctionFragment;
        "l2ToL1EthBlock()": FunctionFragment;
        "l2ToL1OutputId()": FunctionFragment;
        "l2ToL1Sender()": FunctionFragment;
        "l2ToL1Timestamp()": FunctionFragment;
        "updateSendRoot(bytes32,bytes32)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "l2ToL1BatchNum", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2ToL1Block", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2ToL1EthBlock", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2ToL1OutputId", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2ToL1Sender", values?: undefined): string;
    encodeFunctionData(functionFragment: "l2ToL1Timestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "updateSendRoot", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "l2ToL1BatchNum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2ToL1Block", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2ToL1EthBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2ToL1OutputId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2ToL1Sender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l2ToL1Timestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateSendRoot", data: BytesLike): Result;
    events: {
        "OutBoxTransactionExecuted(address,address,uint256,uint256)": EventFragment;
        "SendRootUpdated(bytes32,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OutBoxTransactionExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendRootUpdated"): EventFragment;
}
export declare type OutBoxTransactionExecutedEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    BigNumber
], {
    to: string;
    l2Sender: string;
    zero: BigNumber;
    transactionIndex: BigNumber;
}>;
export declare type OutBoxTransactionExecutedEventFilter = TypedEventFilter<OutBoxTransactionExecutedEvent>;
export declare type SendRootUpdatedEvent = TypedEvent<[
    string,
    string
], {
    blockHash: string;
    outputRoot: string;
}>;
export declare type SendRootUpdatedEventFilter = TypedEventFilter<SendRootUpdatedEvent>;
export interface IOutbox extends BaseContract {
    contractName: "IOutbox";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOutboxInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        l2ToL1BatchNum(overrides?: CallOverrides): Promise<[BigNumber]>;
        l2ToL1Block(overrides?: CallOverrides): Promise<[BigNumber]>;
        l2ToL1EthBlock(overrides?: CallOverrides): Promise<[BigNumber]>;
        l2ToL1OutputId(overrides?: CallOverrides): Promise<[string]>;
        l2ToL1Sender(overrides?: CallOverrides): Promise<[string]>;
        l2ToL1Timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;
        updateSendRoot(sendRoot: BytesLike, l2BlockHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    l2ToL1BatchNum(overrides?: CallOverrides): Promise<BigNumber>;
    l2ToL1Block(overrides?: CallOverrides): Promise<BigNumber>;
    l2ToL1EthBlock(overrides?: CallOverrides): Promise<BigNumber>;
    l2ToL1OutputId(overrides?: CallOverrides): Promise<string>;
    l2ToL1Sender(overrides?: CallOverrides): Promise<string>;
    l2ToL1Timestamp(overrides?: CallOverrides): Promise<BigNumber>;
    updateSendRoot(sendRoot: BytesLike, l2BlockHash: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        l2ToL1BatchNum(overrides?: CallOverrides): Promise<BigNumber>;
        l2ToL1Block(overrides?: CallOverrides): Promise<BigNumber>;
        l2ToL1EthBlock(overrides?: CallOverrides): Promise<BigNumber>;
        l2ToL1OutputId(overrides?: CallOverrides): Promise<string>;
        l2ToL1Sender(overrides?: CallOverrides): Promise<string>;
        l2ToL1Timestamp(overrides?: CallOverrides): Promise<BigNumber>;
        updateSendRoot(sendRoot: BytesLike, l2BlockHash: BytesLike, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OutBoxTransactionExecuted(address,address,uint256,uint256)"(to?: string | null, l2Sender?: string | null, zero?: BigNumberish | null, transactionIndex?: null): OutBoxTransactionExecutedEventFilter;
        OutBoxTransactionExecuted(to?: string | null, l2Sender?: string | null, zero?: BigNumberish | null, transactionIndex?: null): OutBoxTransactionExecutedEventFilter;
        "SendRootUpdated(bytes32,bytes32)"(blockHash?: BytesLike | null, outputRoot?: BytesLike | null): SendRootUpdatedEventFilter;
        SendRootUpdated(blockHash?: BytesLike | null, outputRoot?: BytesLike | null): SendRootUpdatedEventFilter;
    };
    estimateGas: {
        l2ToL1BatchNum(overrides?: CallOverrides): Promise<BigNumber>;
        l2ToL1Block(overrides?: CallOverrides): Promise<BigNumber>;
        l2ToL1EthBlock(overrides?: CallOverrides): Promise<BigNumber>;
        l2ToL1OutputId(overrides?: CallOverrides): Promise<BigNumber>;
        l2ToL1Sender(overrides?: CallOverrides): Promise<BigNumber>;
        l2ToL1Timestamp(overrides?: CallOverrides): Promise<BigNumber>;
        updateSendRoot(sendRoot: BytesLike, l2BlockHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        l2ToL1BatchNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2ToL1Block(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2ToL1EthBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2ToL1OutputId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2ToL1Sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        l2ToL1Timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        updateSendRoot(sendRoot: BytesLike, l2BlockHash: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
