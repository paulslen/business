import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export declare namespace ISequencerInbox {
    type TimeBoundsStruct = {
        minTimestamp: BigNumberish;
        maxTimestamp: BigNumberish;
        minBlockNumber: BigNumberish;
        maxBlockNumber: BigNumberish;
    };
    type TimeBoundsStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        minTimestamp: BigNumber;
        maxTimestamp: BigNumber;
        minBlockNumber: BigNumber;
        maxBlockNumber: BigNumber;
    };
    type MaxTimeVariationStruct = {
        delayBlocks: BigNumberish;
        futureBlocks: BigNumberish;
        delaySeconds: BigNumberish;
        futureSeconds: BigNumberish;
    };
    type MaxTimeVariationStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        delayBlocks: BigNumber;
        futureBlocks: BigNumber;
        delaySeconds: BigNumber;
        futureSeconds: BigNumber;
    };
}
export interface ISequencerInboxInterface extends utils.Interface {
    contractName: "ISequencerInbox";
    functions: {
        "addSequencerL2Batch(uint256,bytes,uint256,address)": FunctionFragment;
        "batchCount()": FunctionFragment;
        "inboxAccs(uint256)": FunctionFragment;
        "setIsBatchPoster(address,bool)": FunctionFragment;
        "setMaxTimeVariation((uint256,uint256,uint256,uint256))": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "addSequencerL2Batch", values: [BigNumberish, BytesLike, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "batchCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "inboxAccs", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setIsBatchPoster", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setMaxTimeVariation", values: [ISequencerInbox.MaxTimeVariationStruct]): string;
    decodeFunctionResult(functionFragment: "addSequencerL2Batch", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "batchCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboxAccs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setIsBatchPoster", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxTimeVariation", data: BytesLike): Result;
    events: {
        "SequencerBatchData(uint256,bytes)": EventFragment;
        "SequencerBatchDelivered(uint256,bytes32,bytes32,bytes32,uint256,tuple,uint8)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "SequencerBatchData"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SequencerBatchDelivered"): EventFragment;
}
export declare type SequencerBatchDataEvent = TypedEvent<[
    BigNumber,
    string
], {
    batchSequenceNumber: BigNumber;
    data: string;
}>;
export declare type SequencerBatchDataEventFilter = TypedEventFilter<SequencerBatchDataEvent>;
export declare type SequencerBatchDeliveredEvent = TypedEvent<[
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    ISequencerInbox.TimeBoundsStructOutput,
    number
], {
    batchSequenceNumber: BigNumber;
    beforeAcc: string;
    afterAcc: string;
    delayedAcc: string;
    afterDelayedMessagesRead: BigNumber;
    timeBounds: ISequencerInbox.TimeBoundsStructOutput;
    dataLocation: number;
}>;
export declare type SequencerBatchDeliveredEventFilter = TypedEventFilter<SequencerBatchDeliveredEvent>;
export interface ISequencerInbox extends BaseContract {
    contractName: "ISequencerInbox";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ISequencerInboxInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addSequencerL2Batch(sequenceNumber: BigNumberish, data: BytesLike, afterDelayedMessagesRead: BigNumberish, gasRefunder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        batchCount(overrides?: CallOverrides): Promise<[BigNumber]>;
        inboxAccs(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        setIsBatchPoster(addr: string, isBatchPoster_: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setMaxTimeVariation(timeVariation: ISequencerInbox.MaxTimeVariationStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    addSequencerL2Batch(sequenceNumber: BigNumberish, data: BytesLike, afterDelayedMessagesRead: BigNumberish, gasRefunder: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    batchCount(overrides?: CallOverrides): Promise<BigNumber>;
    inboxAccs(index: BigNumberish, overrides?: CallOverrides): Promise<string>;
    setIsBatchPoster(addr: string, isBatchPoster_: boolean, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setMaxTimeVariation(timeVariation: ISequencerInbox.MaxTimeVariationStruct, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addSequencerL2Batch(sequenceNumber: BigNumberish, data: BytesLike, afterDelayedMessagesRead: BigNumberish, gasRefunder: string, overrides?: CallOverrides): Promise<void>;
        batchCount(overrides?: CallOverrides): Promise<BigNumber>;
        inboxAccs(index: BigNumberish, overrides?: CallOverrides): Promise<string>;
        setIsBatchPoster(addr: string, isBatchPoster_: boolean, overrides?: CallOverrides): Promise<void>;
        setMaxTimeVariation(timeVariation: ISequencerInbox.MaxTimeVariationStruct, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "SequencerBatchData(uint256,bytes)"(batchSequenceNumber?: BigNumberish | null, data?: null): SequencerBatchDataEventFilter;
        SequencerBatchData(batchSequenceNumber?: BigNumberish | null, data?: null): SequencerBatchDataEventFilter;
        "SequencerBatchDelivered(uint256,bytes32,bytes32,bytes32,uint256,tuple,uint8)"(batchSequenceNumber?: BigNumberish | null, beforeAcc?: BytesLike | null, afterAcc?: BytesLike | null, delayedAcc?: null, afterDelayedMessagesRead?: null, timeBounds?: null, dataLocation?: null): SequencerBatchDeliveredEventFilter;
        SequencerBatchDelivered(batchSequenceNumber?: BigNumberish | null, beforeAcc?: BytesLike | null, afterAcc?: BytesLike | null, delayedAcc?: null, afterDelayedMessagesRead?: null, timeBounds?: null, dataLocation?: null): SequencerBatchDeliveredEventFilter;
    };
    estimateGas: {
        addSequencerL2Batch(sequenceNumber: BigNumberish, data: BytesLike, afterDelayedMessagesRead: BigNumberish, gasRefunder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        batchCount(overrides?: CallOverrides): Promise<BigNumber>;
        inboxAccs(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        setIsBatchPoster(addr: string, isBatchPoster_: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setMaxTimeVariation(timeVariation: ISequencerInbox.MaxTimeVariationStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addSequencerL2Batch(sequenceNumber: BigNumberish, data: BytesLike, afterDelayedMessagesRead: BigNumberish, gasRefunder: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        batchCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboxAccs(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setIsBatchPoster(addr: string, isBatchPoster_: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setMaxTimeVariation(timeVariation: ISequencerInbox.MaxTimeVariationStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
