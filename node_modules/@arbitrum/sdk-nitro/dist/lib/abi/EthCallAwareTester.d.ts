import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';
export interface EthCallAwareTesterInterface extends utils.Interface {
    contractName: 'EthCallAwareTester';
    functions: {
        'testFunction(uint256,bytes)': FunctionFragment;
    };
    encodeFunctionData(functionFragment: 'testFunction', values: [BigNumberish, BytesLike]): string;
    decodeFunctionResult(functionFragment: 'testFunction', data: BytesLike): Result;
    events: {
        'TxSuccess(uint256,bytes)': EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: 'TxSuccess'): EventFragment;
}
export declare type TxSuccessEvent = TypedEvent<[
    BigNumber,
    string
], {
    num: BigNumber;
    data: string;
}>;
export declare type TxSuccessEventFilter = TypedEventFilter<TxSuccessEvent>;
export interface EthCallAwareTester extends BaseContract {
    contractName: 'EthCallAwareTester';
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: EthCallAwareTesterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        testFunction(num: BigNumberish, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    testFunction(num: BigNumberish, data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        testFunction(num: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        'TxSuccess(uint256,bytes)'(num?: null, data?: null): TxSuccessEventFilter;
        TxSuccess(num?: null, data?: null): TxSuccessEventFilter;
    };
    estimateGas: {
        testFunction(num: BigNumberish, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        testFunction(num: BigNumberish, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
