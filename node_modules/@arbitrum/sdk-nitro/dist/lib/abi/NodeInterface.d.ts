import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface NodeInterfaceInterface extends utils.Interface {
    contractName: "NodeInterface";
    functions: {
        "constructOutboxProof(uint64,uint64)": FunctionFragment;
        "estimateRetryableTicket(address,uint256,address,uint256,address,address,bytes)": FunctionFragment;
        "findBatchContainingBlock(uint64)": FunctionFragment;
        "getL1Confirmations(bytes32)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "constructOutboxProof", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "estimateRetryableTicket", values: [
        string,
        BigNumberish,
        string,
        BigNumberish,
        string,
        string,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "findBatchContainingBlock", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getL1Confirmations", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "constructOutboxProof", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateRetryableTicket", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "findBatchContainingBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getL1Confirmations", data: BytesLike): Result;
    events: {};
}
export interface NodeInterface extends BaseContract {
    contractName: "NodeInterface";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: NodeInterfaceInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        constructOutboxProof(size: BigNumberish, leaf: BigNumberish, overrides?: CallOverrides): Promise<[
            string,
            string,
            string[]
        ] & {
            send: string;
            root: string;
            proof: string[];
        }>;
        estimateRetryableTicket(sender: string, deposit: BigNumberish, to: string, l2CallValue: BigNumberish, excessFeeRefundAddress: string, callValueRefundAddress: string, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        findBatchContainingBlock(blockNum: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & {
            batch: BigNumber;
        }>;
        getL1Confirmations(blockHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber] & {
            confirmations: BigNumber;
        }>;
    };
    constructOutboxProof(size: BigNumberish, leaf: BigNumberish, overrides?: CallOverrides): Promise<[
        string,
        string,
        string[]
    ] & {
        send: string;
        root: string;
        proof: string[];
    }>;
    estimateRetryableTicket(sender: string, deposit: BigNumberish, to: string, l2CallValue: BigNumberish, excessFeeRefundAddress: string, callValueRefundAddress: string, data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    findBatchContainingBlock(blockNum: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    getL1Confirmations(blockHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        constructOutboxProof(size: BigNumberish, leaf: BigNumberish, overrides?: CallOverrides): Promise<[
            string,
            string,
            string[]
        ] & {
            send: string;
            root: string;
            proof: string[];
        }>;
        estimateRetryableTicket(sender: string, deposit: BigNumberish, to: string, l2CallValue: BigNumberish, excessFeeRefundAddress: string, callValueRefundAddress: string, data: BytesLike, overrides?: CallOverrides): Promise<void>;
        findBatchContainingBlock(blockNum: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getL1Confirmations(blockHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        constructOutboxProof(size: BigNumberish, leaf: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        estimateRetryableTicket(sender: string, deposit: BigNumberish, to: string, l2CallValue: BigNumberish, excessFeeRefundAddress: string, callValueRefundAddress: string, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        findBatchContainingBlock(blockNum: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getL1Confirmations(blockHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        constructOutboxProof(size: BigNumberish, leaf: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateRetryableTicket(sender: string, deposit: BigNumberish, to: string, l2CallValue: BigNumberish, excessFeeRefundAddress: string, callValueRefundAddress: string, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        findBatchContainingBlock(blockNum: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getL1Confirmations(blockHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
