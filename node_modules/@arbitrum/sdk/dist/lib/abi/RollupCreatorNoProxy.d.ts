import { BaseContract, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface RollupCreatorNoProxyInterface extends utils.Interface {
    contractName: "RollupCreatorNoProxy";
    functions: {};
    events: {
        "RollupCreated(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "RollupCreated"): EventFragment;
}
export declare type RollupCreatedEvent = TypedEvent<[
    string,
    string
], {
    rollupAddress: string;
    inbox: string;
}>;
export declare type RollupCreatedEventFilter = TypedEventFilter<RollupCreatedEvent>;
export interface RollupCreatorNoProxy extends BaseContract {
    contractName: "RollupCreatorNoProxy";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: RollupCreatorNoProxyInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {
        "RollupCreated(address,address)"(rollupAddress?: null, inbox?: null): RollupCreatedEventFilter;
        RollupCreated(rollupAddress?: null, inbox?: null): RollupCreatedEventFilter;
    };
    estimateGas: {};
    populateTransaction: {};
}
