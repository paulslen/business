import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface BufferProofTesterInterface extends utils.Interface {
    contractName: "BufferProofTester";
    functions: {
        "executeStep(address[2],uint256,bytes32[2],bytes,bytes)": FunctionFragment;
        "executeStepDebug(address[2],uint256,bytes32[2],bytes,bytes)": FunctionFragment;
        "executeStepTest(uint256,bytes32,bytes32,bytes,bytes)": FunctionFragment;
        "parseProof(bytes)": FunctionFragment;
        "testCheckSize(bytes32,uint256,bytes32[])": FunctionFragment;
        "testGet(bytes32,uint256,bytes32[])": FunctionFragment;
        "testSet(bytes32,uint256,bytes32,bytes32[],uint256,bytes32,bytes32)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "executeStep", values: [
        [
            string,
            string
        ],
        BigNumberish,
        [
            BytesLike,
            BytesLike
        ],
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "executeStepDebug", values: [
        [
            string,
            string
        ],
        BigNumberish,
        [
            BytesLike,
            BytesLike
        ],
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "executeStepTest", values: [BigNumberish, BytesLike, BytesLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "parseProof", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "testCheckSize", values: [BytesLike, BigNumberish, BytesLike[]]): string;
    encodeFunctionData(functionFragment: "testGet", values: [BytesLike, BigNumberish, BytesLike[]]): string;
    encodeFunctionData(functionFragment: "testSet", values: [
        BytesLike,
        BigNumberish,
        BytesLike,
        BytesLike[],
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    decodeFunctionResult(functionFragment: "executeStep", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeStepDebug", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeStepTest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "parseProof", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testCheckSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testGet", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSet", data: BytesLike): Result;
    events: {
        "OneStepProofResult(uint64,uint256,bytes32[4])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OneStepProofResult"): EventFragment;
}
export declare type OneStepProofResultEvent = TypedEvent<[
    BigNumber,
    BigNumber,
    [string, string, string, string]
], {
    gas: BigNumber;
    totalMessagesRead: BigNumber;
    fields: [string, string, string, string];
}>;
export declare type OneStepProofResultEventFilter = TypedEventFilter<OneStepProofResultEvent>;
export interface BufferProofTester extends BaseContract {
    contractName: "BufferProofTester";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: BufferProofTesterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        executeStep(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            [string, string, string, string]
        ] & {
            gas: BigNumber;
            afterMessagesRead: BigNumber;
            fields: [string, string, string, string];
        }>;
        executeStepDebug(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<[
            string,
            string
        ] & {
            startMachine: string;
            afterMachine: string;
        }>;
        executeStepTest(initialMessagesRead: BigNumberish, initialSendAcc: BytesLike, initialLogAcc: BytesLike, proof: BytesLike, bproof: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        parseProof(proof: BytesLike, overrides?: CallOverrides): Promise<[string[], string[], string[], string[]]>;
        testCheckSize(buf: BytesLike, offset: BigNumberish, proof: BytesLike[], overrides?: CallOverrides): Promise<[boolean]>;
        testGet(buf: BytesLike, loc: BigNumberish, proof: BytesLike[], overrides?: CallOverrides): Promise<[string]>;
        testSet(buf: BytesLike, loc: BigNumberish, v: BytesLike, proof: BytesLike[], nh: BigNumberish, normal1: BytesLike, normal2: BytesLike, overrides?: CallOverrides): Promise<[string]>;
    };
    executeStep(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        [string, string, string, string]
    ] & {
        gas: BigNumber;
        afterMessagesRead: BigNumber;
        fields: [string, string, string, string];
    }>;
    executeStepDebug(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<[string, string] & {
        startMachine: string;
        afterMachine: string;
    }>;
    executeStepTest(initialMessagesRead: BigNumberish, initialSendAcc: BytesLike, initialLogAcc: BytesLike, proof: BytesLike, bproof: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    parseProof(proof: BytesLike, overrides?: CallOverrides): Promise<[string[], string[], string[], string[]]>;
    testCheckSize(buf: BytesLike, offset: BigNumberish, proof: BytesLike[], overrides?: CallOverrides): Promise<boolean>;
    testGet(buf: BytesLike, loc: BigNumberish, proof: BytesLike[], overrides?: CallOverrides): Promise<string>;
    testSet(buf: BytesLike, loc: BigNumberish, v: BytesLike, proof: BytesLike[], nh: BigNumberish, normal1: BytesLike, normal2: BytesLike, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        executeStep(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            [string, string, string, string]
        ] & {
            gas: BigNumber;
            afterMessagesRead: BigNumber;
            fields: [string, string, string, string];
        }>;
        executeStepDebug(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<[
            string,
            string
        ] & {
            startMachine: string;
            afterMachine: string;
        }>;
        executeStepTest(initialMessagesRead: BigNumberish, initialSendAcc: BytesLike, initialLogAcc: BytesLike, proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<void>;
        parseProof(proof: BytesLike, overrides?: CallOverrides): Promise<[string[], string[], string[], string[]]>;
        testCheckSize(buf: BytesLike, offset: BigNumberish, proof: BytesLike[], overrides?: CallOverrides): Promise<boolean>;
        testGet(buf: BytesLike, loc: BigNumberish, proof: BytesLike[], overrides?: CallOverrides): Promise<string>;
        testSet(buf: BytesLike, loc: BigNumberish, v: BytesLike, proof: BytesLike[], nh: BigNumberish, normal1: BytesLike, normal2: BytesLike, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "OneStepProofResult(uint64,uint256,bytes32[4])"(gas?: null, totalMessagesRead?: null, fields?: null): OneStepProofResultEventFilter;
        OneStepProofResult(gas?: null, totalMessagesRead?: null, fields?: null): OneStepProofResultEventFilter;
    };
    estimateGas: {
        executeStep(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        executeStepDebug(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        executeStepTest(initialMessagesRead: BigNumberish, initialSendAcc: BytesLike, initialLogAcc: BytesLike, proof: BytesLike, bproof: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        parseProof(proof: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        testCheckSize(buf: BytesLike, offset: BigNumberish, proof: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;
        testGet(buf: BytesLike, loc: BigNumberish, proof: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;
        testSet(buf: BytesLike, loc: BigNumberish, v: BytesLike, proof: BytesLike[], nh: BigNumberish, normal1: BytesLike, normal2: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        executeStep(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executeStepDebug(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executeStepTest(initialMessagesRead: BigNumberish, initialSendAcc: BytesLike, initialLogAcc: BytesLike, proof: BytesLike, bproof: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        parseProof(proof: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testCheckSize(buf: BytesLike, offset: BigNumberish, proof: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testGet(buf: BytesLike, loc: BigNumberish, proof: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testSet(buf: BytesLike, loc: BigNumberish, v: BytesLike, proof: BytesLike[], nh: BigNumberish, normal1: BytesLike, normal2: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
