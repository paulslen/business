import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface ArbAggregatorInterface extends utils.Interface {
    contractName: "ArbAggregator";
    functions: {
        "getCompressionRatio(address)": FunctionFragment;
        "getDefaultAggregator()": FunctionFragment;
        "getFeeCollector(address)": FunctionFragment;
        "getPreferredAggregator(address)": FunctionFragment;
        "getTxBaseFee(address)": FunctionFragment;
        "setCompressionRatio(address,uint64)": FunctionFragment;
        "setDefaultAggregator(address)": FunctionFragment;
        "setFeeCollector(address,address)": FunctionFragment;
        "setPreferredAggregator(address)": FunctionFragment;
        "setTxBaseFee(address,uint256)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "getCompressionRatio", values: [string]): string;
    encodeFunctionData(functionFragment: "getDefaultAggregator", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFeeCollector", values: [string]): string;
    encodeFunctionData(functionFragment: "getPreferredAggregator", values: [string]): string;
    encodeFunctionData(functionFragment: "getTxBaseFee", values: [string]): string;
    encodeFunctionData(functionFragment: "setCompressionRatio", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setDefaultAggregator", values: [string]): string;
    encodeFunctionData(functionFragment: "setFeeCollector", values: [string, string]): string;
    encodeFunctionData(functionFragment: "setPreferredAggregator", values: [string]): string;
    encodeFunctionData(functionFragment: "setTxBaseFee", values: [string, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "getCompressionRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultAggregator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeCollector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPreferredAggregator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTxBaseFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setCompressionRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultAggregator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeeCollector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPreferredAggregator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTxBaseFee", data: BytesLike): Result;
    events: {};
}
export interface ArbAggregator extends BaseContract {
    contractName: "ArbAggregator";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ArbAggregatorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getCompressionRatio(aggregator: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        getDefaultAggregator(overrides?: CallOverrides): Promise<[string]>;
        getFeeCollector(aggregator: string, overrides?: CallOverrides): Promise<[string]>;
        getPreferredAggregator(addr: string, overrides?: CallOverrides): Promise<[string, boolean]>;
        getTxBaseFee(aggregator: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        setCompressionRatio(aggregator: string, ratio: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setDefaultAggregator(newDefault: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setFeeCollector(aggregator: string, newFeeCollector: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setPreferredAggregator(prefAgg: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setTxBaseFee(aggregator: string, feeInL1Gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    getCompressionRatio(aggregator: string, overrides?: CallOverrides): Promise<BigNumber>;
    getDefaultAggregator(overrides?: CallOverrides): Promise<string>;
    getFeeCollector(aggregator: string, overrides?: CallOverrides): Promise<string>;
    getPreferredAggregator(addr: string, overrides?: CallOverrides): Promise<[string, boolean]>;
    getTxBaseFee(aggregator: string, overrides?: CallOverrides): Promise<BigNumber>;
    setCompressionRatio(aggregator: string, ratio: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setDefaultAggregator(newDefault: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setFeeCollector(aggregator: string, newFeeCollector: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setPreferredAggregator(prefAgg: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setTxBaseFee(aggregator: string, feeInL1Gas: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getCompressionRatio(aggregator: string, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultAggregator(overrides?: CallOverrides): Promise<string>;
        getFeeCollector(aggregator: string, overrides?: CallOverrides): Promise<string>;
        getPreferredAggregator(addr: string, overrides?: CallOverrides): Promise<[string, boolean]>;
        getTxBaseFee(aggregator: string, overrides?: CallOverrides): Promise<BigNumber>;
        setCompressionRatio(aggregator: string, ratio: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setDefaultAggregator(newDefault: string, overrides?: CallOverrides): Promise<void>;
        setFeeCollector(aggregator: string, newFeeCollector: string, overrides?: CallOverrides): Promise<void>;
        setPreferredAggregator(prefAgg: string, overrides?: CallOverrides): Promise<void>;
        setTxBaseFee(aggregator: string, feeInL1Gas: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        getCompressionRatio(aggregator: string, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultAggregator(overrides?: CallOverrides): Promise<BigNumber>;
        getFeeCollector(aggregator: string, overrides?: CallOverrides): Promise<BigNumber>;
        getPreferredAggregator(addr: string, overrides?: CallOverrides): Promise<BigNumber>;
        getTxBaseFee(aggregator: string, overrides?: CallOverrides): Promise<BigNumber>;
        setCompressionRatio(aggregator: string, ratio: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setDefaultAggregator(newDefault: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setFeeCollector(aggregator: string, newFeeCollector: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setPreferredAggregator(prefAgg: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setTxBaseFee(aggregator: string, feeInL1Gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getCompressionRatio(aggregator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeCollector(aggregator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPreferredAggregator(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTxBaseFee(aggregator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setCompressionRatio(aggregator: string, ratio: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultAggregator(newDefault: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setFeeCollector(aggregator: string, newFeeCollector: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setPreferredAggregator(prefAgg: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setTxBaseFee(aggregator: string, feeInL1Gas: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
