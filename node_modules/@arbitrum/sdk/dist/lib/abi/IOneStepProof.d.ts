import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface IOneStepProofInterface extends utils.Interface {
    contractName: "IOneStepProof";
    functions: {
        "executeStep(address[2],uint256,bytes32[2],bytes,bytes)": FunctionFragment;
        "executeStepDebug(address[2],uint256,bytes32[2],bytes,bytes)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "executeStep", values: [
        [
            string,
            string
        ],
        BigNumberish,
        [
            BytesLike,
            BytesLike
        ],
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "executeStepDebug", values: [
        [
            string,
            string
        ],
        BigNumberish,
        [
            BytesLike,
            BytesLike
        ],
        BytesLike,
        BytesLike
    ]): string;
    decodeFunctionResult(functionFragment: "executeStep", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeStepDebug", data: BytesLike): Result;
    events: {};
}
export interface IOneStepProof extends BaseContract {
    contractName: "IOneStepProof";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOneStepProofInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        executeStep(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            [string, string, string, string]
        ] & {
            gas: BigNumber;
            afterMessagesRead: BigNumber;
            fields: [string, string, string, string];
        }>;
        executeStepDebug(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<[
            string,
            string
        ] & {
            startMachine: string;
            afterMachine: string;
        }>;
    };
    executeStep(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        [string, string, string, string]
    ] & {
        gas: BigNumber;
        afterMessagesRead: BigNumber;
        fields: [string, string, string, string];
    }>;
    executeStepDebug(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<[string, string] & {
        startMachine: string;
        afterMachine: string;
    }>;
    callStatic: {
        executeStep(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            [string, string, string, string]
        ] & {
            gas: BigNumber;
            afterMessagesRead: BigNumber;
            fields: [string, string, string, string];
        }>;
        executeStepDebug(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<[
            string,
            string
        ] & {
            startMachine: string;
            afterMachine: string;
        }>;
    };
    filters: {};
    estimateGas: {
        executeStep(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        executeStepDebug(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        executeStep(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executeStepDebug(bridges: [string, string], initialMessagesRead: BigNumberish, accs: [BytesLike, BytesLike], proof: BytesLike, bproof: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
