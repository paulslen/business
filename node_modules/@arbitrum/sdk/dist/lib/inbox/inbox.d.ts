import { Signer } from '@ethersproject/abstract-signer';
import { ContractTransaction, Overrides } from 'ethers';
import { MessageDeliveredEvent } from '../abi/Bridge';
import { L2Network } from '../dataEntities/networks';
import { FetchedEvent } from '../utils/eventFetcher';
declare type ForceInclusionParams = FetchedEvent<MessageDeliveredEvent> & {
    delayedAcc: string;
};
/**
 * Tools for interacting with the inbox and bridge contracts
 */
export declare class InboxTools {
    private readonly l1Signer;
    private readonly classicInbox;
    private readonly nitroInbox;
    constructor(l1Signer: Signer, l2Network: L2Network);
    /**
     * Find the event of the latest message that can be force include
     * @param maxSearchRangeBlocks The max range of blocks to search in.
     * Defaults to 3 * 6545 ( = ~3 days) prior to the first eligble block
     * @param startSearchRangeBlocks The start range of block to search in.
     * Moves incrementally up to the maxSearchRangeBlocks. Defaults to 100;
     * @param rangeMultiplier The multiplier to use when increasing the block range
     * Defaults to 2.
     * @returns Null if non can be found.
     */
    getForceIncludableEvent(maxSearchRangeBlocks?: number, startSearchRangeBlocks?: number, rangeMultipler?: number): Promise<ForceInclusionParams | null>;
    /**
     * Force includes all eligible messages in the delayed inbox.
     * The inbox contract doesnt allow a message to be force-included
     * until after a delay period has been completed.
     * @param messageDeliveredEvent Provide this to include all messages up to this one. Responsibility is on the caller to check the eligibility of this event.
     * @returns The force include transaction, or null if no eligible message were found for inclusion
     */
    forceInclude<T extends ForceInclusionParams | undefined>(messageDeliveredEvent?: T, overrides?: Overrides): Promise<T extends ForceInclusionParams ? ContractTransaction : ContractTransaction | null>;
}
export {};
