/*
 * Copyright 2021, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-env node */
'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InboxTools = void 0;
const ethers_1 = require("ethers");
const classic = __importStar(require("@arbitrum/sdk-classic"));
const nitro = __importStar(require("@arbitrum/sdk-nitro"));
const migration_types_1 = require("../utils/migration_types");
/**
 * Tools for interacting with the inbox and bridge contracts
 */
class InboxTools {
    constructor(l1Signer, l2Network) {
        this.l1Signer = l1Signer;
        this.classicInbox = new classic.InboxTools(l1Signer, (0, migration_types_1.lookupExistingNetwork)(l2Network));
        this.nitroInbox = new nitro.InboxTools(l1Signer, l2Network);
    }
    /**
     * Find the event of the latest message that can be force include
     * @param maxSearchRangeBlocks The max range of blocks to search in.
     * Defaults to 3 * 6545 ( = ~3 days) prior to the first eligble block
     * @param startSearchRangeBlocks The start range of block to search in.
     * Moves incrementally up to the maxSearchRangeBlocks. Defaults to 100;
     * @param rangeMultiplier The multiplier to use when increasing the block range
     * Defaults to 2.
     * @returns Null if non can be found.
     */
    async getForceIncludableEvent(maxSearchRangeBlocks = 3 * 6545, startSearchRangeBlocks = 100, rangeMultipler = 2) {
        if (await (0, migration_types_1.isNitroL1)(this.l1Signer)) {
            return this.nitroInbox.getForceIncludableEvent(maxSearchRangeBlocks, startSearchRangeBlocks, rangeMultipler);
        }
        else {
            const classicParams = await this.classicInbox.getForceIncludableEvent(maxSearchRangeBlocks, startSearchRangeBlocks, rangeMultipler);
            if (!classicParams)
                return null;
            const event = classicParams.event;
            event[6] = ethers_1.BigNumber.from(0);
            event[7] = ethers_1.BigNumber.from(0);
            event.baseFeeL1 = ethers_1.BigNumber.from(0);
            event.timestamp = ethers_1.BigNumber.from(0);
            return Object.assign(Object.assign({}, classicParams), { event });
        }
    }
    async forceInclude(messageDeliveredEvent, overrides) {
        if (await (0, migration_types_1.isNitroL1)(this.l1Signer)) {
            return this.nitroInbox.forceInclude(messageDeliveredEvent, overrides);
        }
        else {
            if (messageDeliveredEvent) {
                const event = messageDeliveredEvent.event;
                const tuple = [
                    event[0],
                    event[1],
                    event[2],
                    event[3],
                    event[4],
                    event[5],
                ];
                const typedTuple = tuple;
                typedTuple.beforeInboxAcc = event.beforeInboxAcc;
                typedTuple.kind = event.kind;
                typedTuple.messageDataHash = event.messageDataHash;
                typedTuple.messageDataHash = event.messageDataHash;
                typedTuple.messageIndex = event.messageIndex;
                typedTuple.sender = event.sender;
                typedTuple.inbox = event.inbox;
                const classicEvent = Object.assign(Object.assign({}, messageDeliveredEvent), { event: typedTuple });
                return this.classicInbox.forceInclude(classicEvent, overrides);
            }
            else
                return this.classicInbox.forceInclude(undefined, overrides);
        }
    }
}
exports.InboxTools = InboxTools;
