/*
 * Copyright 2021, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-env node */
'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.L2TransactionReceipt = void 0;
const L2ToL1Message_1 = require("./L2ToL1Message");
const classic = __importStar(require("@arbitrum/sdk-classic"));
const nitro = __importStar(require("@arbitrum/sdk-nitro"));
const migration_types_1 = require("../utils/migration_types");
class L2TransactionReceipt {
    constructor(tx) {
        this.to = tx.to;
        this.from = tx.from;
        this.contractAddress = tx.contractAddress;
        this.transactionIndex = tx.transactionIndex;
        this.root = tx.root;
        this.gasUsed = tx.gasUsed;
        this.logsBloom = tx.logsBloom;
        this.blockHash = tx.blockHash;
        this.transactionHash = tx.transactionHash;
        this.logs = tx.logs;
        this.blockNumber = tx.blockNumber;
        this.confirmations = tx.confirmations;
        this.cumulativeGasUsed = tx.cumulativeGasUsed;
        this.effectiveGasPrice = tx.effectiveGasPrice;
        this.byzantium = tx.byzantium;
        this.type = tx.type;
        this.status = tx.status;
        this.classicReceipt = new classic.L2TransactionReceipt(tx);
        this.nitroReceipt = new nitro.L2TransactionReceipt(tx);
    }
    /**
     * Get an L2ToL1Transaction events created by this transaction
     * @returns
     */
    getL2ToL1Events() {
        return [
            ...this.nitroReceipt.getL2ToL1Events(),
            ...this.classicReceipt.getL2ToL1Events(),
        ];
    }
    isClassic(e) {
        return !!e.indexInBatch;
    }
    async getL2ToL1Messages(l1SignerOrProvider, l2Provider) {
        const events = await this.getL2ToL1Events();
        return Promise.all(events.map(async (e) => {
            if (this.isClassic(e)) {
                // classic
                const l2Network = await classic.getL2Network(l2Provider);
                const outboxAddr = (0, migration_types_1.getOutboxAddr)(l2Network, e.batchNumber.toNumber());
                return L2ToL1Message_1.L2ToL1Message.fromEvent(l1SignerOrProvider, e, outboxAddr);
            }
            else {
                // nitro
                return L2ToL1Message_1.L2ToL1Message.fromEvent(l1SignerOrProvider, e);
            }
        }));
    }
    /**
     * Whether the data associated with this transaction has been
     * made available on L1
     * @param l2Provider
     * @param confirmations The number of confirmations on the batch before data is to be considered available
     * @returns
     */
    async isDataAvailable(l2Provider, l1Provider, confirmations = 10) {
        if (await (0, migration_types_1.isNitroL1)(l1Provider)) {
            return this.nitroReceipt.isDataAvailable(l2Provider, confirmations);
        }
        else {
            return this.classicReceipt.isDataAvailable(l2Provider, l1Provider);
        }
    }
}
exports.L2TransactionReceipt = L2TransactionReceipt;
_a = L2TransactionReceipt;
/**
 * Replaces the wait function with one that returns an L2TransactionReceipt
 * @param contractTransaction
 * @returns
 */
L2TransactionReceipt.monkeyPatchWait = (contractTransaction) => {
    const wait = contractTransaction.wait;
    contractTransaction.wait = async (_confirmations) => {
        // we ignore the confirmations for now since L2 transactions shouldn't re-org
        // in future we should give users a more fine grained way to check the finality of
        // an l2 transaction - check if a batch is on L1, if an assertion has been made, and if
        // it has been confirmed.
        const result = await wait();
        return new L2TransactionReceipt(result);
    };
    return contractTransaction;
};
