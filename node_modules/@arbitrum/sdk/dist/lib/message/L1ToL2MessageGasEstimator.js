"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.L1ToL2MessageGasEstimator = void 0;
const ethers_1 = require("ethers");
const classic = __importStar(require("@arbitrum/sdk-classic"));
const nitro = __importStar(require("@arbitrum/sdk-nitro"));
const migration_types_1 = require("../utils/migration_types");
class L1ToL2MessageGasEstimator {
    constructor(l2Provider) {
        this.l2Provider = l2Provider;
        this.classicEstimator = new classic.L1ToL2MessageGasEstimator(l2Provider);
        this.nitroEstimator = new nitro.L1ToL2MessageGasEstimator(l2Provider);
    }
    /**
     * Return the fee, in wei, of submitting a new retryable tx with a given calldata size.
     * @param callDataSize
     * @param options
     * @returns
     */
    async estimateSubmissionFee(l1Provider, l1BaseFee, callDataSize, options) {
        return (await (0, migration_types_1.isNitroL2)(this.l2Provider))
            ? await this.nitroEstimator.estimateSubmissionFee(l1Provider, l1BaseFee, callDataSize, options)
            : (await this.classicEstimator.estimateSubmissionPrice(callDataSize, options)).submissionPrice;
    }
    /**
     * Estimate the amount of L2 gas required for putting the transaction in the L2 inbox, and executing it.
     * @param sender
     * @param destAddr
     * @param l2CallValue
     * @param excessFeeRefundAddress
     * @param callValueRefundAddress
     * @param calldata
     * @param senderDeposit we dont know how much gas the transaction will use when executing
     * so by default we supply a dummy amount of call value that will definately be more than we need
     * @returns
     */
    async estimateRetryableTicketGasLimit(sender, destAddr, l2CallValue, excessFeeRefundAddress, callValueRefundAddress, calldata, senderDeposit = ethers_1.utils.parseEther('1').add(l2CallValue), maxSubmissionCost, maxGas, gasPriceBid) {
        return (await (0, migration_types_1.isNitroL2)(this.l2Provider))
            ? this.nitroEstimator.estimateRetryableTicketGasLimit(sender, destAddr, l2CallValue, excessFeeRefundAddress, callValueRefundAddress, calldata)
            : this.classicEstimator.estimateRetryableTicketMaxGas(sender, senderDeposit, destAddr, l2CallValue, maxSubmissionCost, excessFeeRefundAddress, callValueRefundAddress, maxGas, gasPriceBid, calldata);
    }
    /**
     * Get gas limit, gas price and submission price estimates for sending an L1->L2 message
     * @param sender Sender of the L1 to L2 transaction
     * @param l2CallTo Destination L2 contract address
     * @param l2CallData The hex call data to be sent in the request
     * @param l2CallValue The value to be sent on L2 as part of the L2 transaction
     * @param l1BaseFee Current l1 base fee
     * @param excessFeeRefundAddress The address to send excess fee refunds too
     * @param callValueRefundAddress The address to send the call value
     * @param options
     * @returns
     */
    async estimateAll(sender, l2CallTo, l2CallData, l2CallValue, l1BaseFee, excessFeeRefundAddress, callValueRefundAddress, l1Provider, options) {
        return (await (0, migration_types_1.isNitroL2)(this.l2Provider))
            ? await this.nitroEstimator.estimateAll(sender, l2CallTo, l2CallData, l2CallValue, l1BaseFee, excessFeeRefundAddress, callValueRefundAddress, l1Provider, options)
            : (0, migration_types_1.convertEstimates)(await this.classicEstimator.estimateMessage(sender, l2CallTo, l2CallData, l2CallValue, Object.assign(Object.assign({}, (0, migration_types_1.convertGasOverrides)(options)), { sendL2CallValueFromL1: options === null || options === void 0 ? void 0 : options.sendL2CallValueFromL1 })));
    }
}
exports.L1ToL2MessageGasEstimator = L1ToL2MessageGasEstimator;
