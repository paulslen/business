/*
 * Copyright 2021, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-env node */
'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminErc20Bridger = exports.Erc20Bridger = void 0;
const constants_1 = require("@ethersproject/constants");
const ethers_1 = require("ethers");
const ERC20__factory_1 = require("../abi/factories/ERC20__factory");
const L2GatewayToken__factory_1 = require("../abi/factories/L2GatewayToken__factory");
const assetBridger_1 = require("./assetBridger");
const L1Transaction_1 = require("../message/L1Transaction");
const L2Transaction_1 = require("../message/L2Transaction");
const classic = __importStar(require("@arbitrum/sdk-classic"));
const nitro = __importStar(require("@arbitrum/sdk-nitro"));
const migration_types_1 = require("../utils/migration_types");
const erc20Bridger_1 = require("@arbitrum/sdk-classic/dist/lib/assetBridger/erc20Bridger");
const erc20Bridger_2 = require("@arbitrum/sdk-nitro/dist/lib/assetBridger/erc20Bridger");
/**
 * Bridger for moving ERC20 tokens back and forth betwen L1 to L2
 */
class Erc20Bridger extends assetBridger_1.AssetBridger {
    /**
     * Bridger for moving ERC20 tokens back and forth betwen L1 to L2
     */
    constructor(l2Network) {
        super(l2Network);
        this.classicBridger = new classic.Erc20Bridger((0, migration_types_1.lookupExistingNetwork)(l2Network));
        this.nitroBridger = new nitro.Erc20Bridger(l2Network);
    }
    /**
     * Get the address of the l1 gateway for this token
     * @param erc20L1Address
     * @param l1Provider
     * @returns
     */
    async getL1GatewayAddress(erc20L1Address, l1Provider) {
        return (await (0, migration_types_1.isNitroL1)(l1Provider))
            ? this.nitroBridger.getL1GatewayAddress(erc20L1Address, l1Provider)
            : this.classicBridger.getL1GatewayAddress(erc20L1Address, l1Provider);
    }
    /**
     * Get the address of the l2 gateway for this token
     * @param erc20L1Address
     * @param l2Provider
     * @returns
     */
    async getL2GatewayAddress(erc20L1Address, l2Provider) {
        return (await (0, migration_types_1.isNitroL2)(l2Provider))
            ? this.nitroBridger.getL2GatewayAddress(erc20L1Address, l2Provider)
            : this.classicBridger.getL2GatewayAddress(erc20L1Address, l2Provider);
    }
    /**
     * Approve tokens for deposit to the bridge. The tokens will be approved for the relevant gateway.
     * @param params
     * @returns
     */
    async approveToken(params) {
        return (await (0, migration_types_1.isNitroL1)(params.l1Signer))
            ? this.nitroBridger.approveToken(params)
            : this.classicBridger.approveToken(params);
    }
    /**
     * Get the L2 events created by a withdrawal
     * @param l2Provider
     * @param gatewayAddress
     * @param l1TokenAddress
     * @param fromAddress
     * @param filter
     * @returns
     */
    async getL2WithdrawalEvents(l2Provider, gatewayAddress, filter, l1TokenAddress, fromAddress) {
        return (await (0, migration_types_1.isNitroL2)(l2Provider))
            ? this.nitroBridger.getL2WithdrawalEvents(l2Provider, gatewayAddress, filter, l1TokenAddress, fromAddress)
            : this.classicBridger.getL2WithdrawalEvents(l2Provider, gatewayAddress, filter, l1TokenAddress, fromAddress);
    }
    /**
     * Get the L2 token contract at the provided address
     * @param l2Provider
     * @param l2TokenAddr
     * @returns
     */
    getL2TokenContract(l2Provider, l2TokenAddr) {
        return L2GatewayToken__factory_1.L2GatewayToken__factory.connect(l2TokenAddr, l2Provider);
    }
    /**
     * Get the L1 token contract at the provided address
     * @param l1Provider
     * @param l1TokenAddr
     * @returns
     */
    getL1TokenContract(l1Provider, l1TokenAddr) {
        return ERC20__factory_1.ERC20__factory.connect(l1TokenAddr, l1Provider);
    }
    /**
     * Get the corresponding L2 for the provided L1 token
     * @param erc20L1Address
     * @param l1Provider
     * @returns
     */
    async getL2ERC20Address(erc20L1Address, l1Provider) {
        return (await (0, migration_types_1.isNitroL1)(l1Provider))
            ? this.nitroBridger.getL2ERC20Address(erc20L1Address, l1Provider)
            : this.classicBridger.getL2ERC20Address(erc20L1Address, l1Provider);
    }
    /**
     * Get the corresponding L1 for the provided L2 token
     * @param erc20L1Address
     * @param l1Provider
     * @returns
     */
    async getL1ERC20Address(erc20L2Address, l2Provider) {
        return (await (0, migration_types_1.isNitroL2)(l2Provider))
            ? this.nitroBridger.getL1ERC20Address(erc20L2Address, l2Provider)
            : this.classicBridger.getL1ERC20Address(erc20L2Address, l2Provider);
    }
    /**
     * Whether the token has been disabled on the router
     * @param l1TokenAddress
     * @param l1Provider
     * @returns
     */
    async l1TokenIsDisabled(l1TokenAddress, l1Provider) {
        return (await (0, migration_types_1.isNitroL1)(l1Provider))
            ? this.nitroBridger.l1TokenIsDisabled(l1TokenAddress, l1Provider)
            : this.classicBridger.l1TokenIsDisabled(l1TokenAddress, l1Provider);
    }
    /**
     * Estimate the gas required for a token deposit
     * @param params
     * @returns
     */
    async depositEstimateGas(params) {
        return (await (0, migration_types_1.isNitroL1)(params.l1Signer))
            ? this.nitroBridger.depositEstimateGas(params)
            : this.classicBridger.depositEstimateGas(Object.assign(Object.assign({}, params), { retryableGasOverrides: (0, migration_types_1.convertGasOverrides)(params.retryableGasOverrides) }));
    }
    /**
     * Execute a token deposit from L1 to L2
     * @param params
     * @returns
     */
    async deposit(params) {
        return L1Transaction_1.L1TransactionReceipt.monkeyPatchContractCallWait((await (0, migration_types_1.isNitroL1)(params.l1Signer))
            ? await this.nitroBridger.deposit(params)
            : await this.classicBridger.deposit(Object.assign(Object.assign({}, params), { retryableGasOverrides: (0, migration_types_1.convertGasOverrides)(params.retryableGasOverrides) })));
    }
    /**
     * Estimate gas for withdrawing tokens from L2 to L1
     * @param params
     * @returns
     */
    async withdrawEstimateGas(params) {
        return (await (0, migration_types_1.isNitroL2)(params.l2Signer))
            ? this.nitroBridger.withdrawEstimateGas(params)
            : this.classicBridger.withdrawEstimateGas(params);
    }
    /**
     * Withdraw tokens from L2 to L1
     * @param params
     * @returns
     */
    async withdraw(params) {
        return L2Transaction_1.L2TransactionReceipt.monkeyPatchWait((await (0, migration_types_1.isNitroL2)(params.l2Signer))
            ? await this.nitroBridger.withdraw(params)
            : await this.classicBridger.withdraw(params));
    }
}
exports.Erc20Bridger = Erc20Bridger;
Erc20Bridger.MAX_APPROVAL = constants_1.MaxUint256;
Erc20Bridger.MIN_CUSTOM_DEPOSIT_GAS_LIMIT = ethers_1.BigNumber.from(275000);
/**
 * Admin functionality for the token bridge
 */
class AdminErc20Bridger extends Erc20Bridger {
    /**
     * Bridger for moving ERC20 tokens back and forth betwen L1 to L2
     */
    constructor(l2Network) {
        super(l2Network);
        this.adminClassicBridger = new erc20Bridger_1.AdminErc20Bridger((0, migration_types_1.lookupExistingNetwork)(l2Network));
        this.adminNitroBridger = new erc20Bridger_2.AdminErc20Bridger(l2Network);
    }
    /**
     * Register a custom token on the Arbitrum bridge
     * See https://developer.offchainlabs.com/docs/bridging_assets#the-arbitrum-generic-custom-gateway for more details
     * @param l1TokenAddress Address of the already deployed l1 token. Must inherit from https://developer.offchainlabs.com/docs/sol_contract_docs/md_docs/arb-bridge-peripherals/tokenbridge/ethereum/icustomtoken.
     * @param l2TokenAddress Address of the already deployed l2 token. Must inherit from https://developer.offchainlabs.com/docs/sol_contract_docs/md_docs/arb-bridge-peripherals/tokenbridge/arbitrum/iarbtoken.
     * @param l1Signer The signer with the rights to call registerTokenOnL2 on the l1 token
     * @param l2Provider Arbitrum rpc provider
     * @returns
     */
    async registerCustomToken(l1TokenAddress, l2TokenAddress, l1Signer, l2Provider) {
        return L1Transaction_1.L1TransactionReceipt.monkeyPatchContractCallWait((await (0, migration_types_1.isNitroL1)(l1Signer))
            ? await this.adminNitroBridger.registerCustomToken(l1TokenAddress, l2TokenAddress, l1Signer, l2Provider)
            : await this.adminClassicBridger.registerCustomToken(l1TokenAddress, l2TokenAddress, l1Signer, l2Provider));
    }
    /**
     * Get all the gateway set events on the L1 gateway router
     * @param l1Provider
     * @param customNetworkL1GatewayRouter
     * @returns
     */
    async getL1GatewaySetEvents(l1Provider, filter, customNetworkL1GatewayRouter) {
        return (await (0, migration_types_1.isNitroL1)(l1Provider))
            ? this.adminNitroBridger.getL1GatewaySetEvents(l1Provider, filter)
            : this.adminClassicBridger.getL1GatewaySetEvents(l1Provider, filter, customNetworkL1GatewayRouter);
    }
    /**
     * Get all the gateway set events on the L2 gateway router
     * @param l1Provider
     * @param customNetworkL1GatewayRouter
     * @returns
     */
    async getL2GatewaySetEvents(l2Provider, filter, customNetworkL2GatewayRouter) {
        return (await (0, migration_types_1.isNitroL2)(l2Provider))
            ? this.adminNitroBridger.getL2GatewaySetEvents(l2Provider, filter, customNetworkL2GatewayRouter)
            : this.adminClassicBridger.getL2GatewaySetEvents(l2Provider, filter, customNetworkL2GatewayRouter);
    }
    /**
     * Register the provided token addresses against the provided gateways
     * @param l1Signer
     * @param l2Provider
     * @param tokenGateways
     * @returns
     */
    async setGateways(l1Signer, l2Provider, tokenGateways, maxGas = ethers_1.BigNumber.from(0)) {
        return L1Transaction_1.L1TransactionReceipt.monkeyPatchContractCallWait((await (0, migration_types_1.isNitroL1)(l1Signer))
            ? await this.adminNitroBridger.setGateways(l1Signer, l2Provider, tokenGateways)
            : await this.adminClassicBridger.setGateways(l1Signer, l2Provider, tokenGateways, maxGas));
    }
}
exports.AdminErc20Bridger = AdminErc20Bridger;
