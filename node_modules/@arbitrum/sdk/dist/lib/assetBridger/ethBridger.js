/*
 * Copyright 2021, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-env node */
'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthBridger = void 0;
const assetBridger_1 = require("./assetBridger");
const L1Transaction_1 = require("../message/L1Transaction");
const L2Transaction_1 = require("../message/L2Transaction");
const classic = __importStar(require("@arbitrum/sdk-classic"));
const nitro = __importStar(require("@arbitrum/sdk-nitro"));
const migration_types_1 = require("../utils/migration_types");
/**
 * Bridger for moving ETH back and forth betwen L1 to L2
 */
class EthBridger extends assetBridger_1.AssetBridger {
    /**
     * Bridger for moving ERC20 tokens back and forth betwen L1 to L2
     */
    constructor(l2Network) {
        super(l2Network);
        this.classicBridger = new classic.EthBridger((0, migration_types_1.lookupExistingNetwork)(l2Network));
        this.nitroBridger = new nitro.EthBridger(l2Network);
    }
    /**
     * Estimate gas for depositing ETH from L1 onto L2
     * @param params
     * @returns
     */
    async depositEstimateGas(params) {
        return (await (0, migration_types_1.isNitroL1)(params.l1Signer))
            ? this.nitroBridger.depositEstimateGas(params)
            : this.classicBridger.depositEstimateGas(params);
    }
    /**
     * Deposit ETH from L1 onto L2
     * @param params
     * @returns
     */
    async deposit(params) {
        return L1Transaction_1.L1TransactionReceipt.monkeyPatchEthDepositWait((await (0, migration_types_1.isNitroL1)(params.l1Signer))
            ? await this.nitroBridger.deposit(params)
            : await this.classicBridger.deposit(params));
    }
    /**
     * Estimate gas for withdrawing ETH from L2 onto L1
     * @param params
     * @returns
     */
    async withdrawEstimateGas(params) {
        return (await (0, migration_types_1.isNitroL2)(params.l2Signer))
            ? this.nitroBridger.withdrawEstimateGas(params)
            : this.classicBridger.withdrawEstimateGas(params);
    }
    /**
     * Withdraw ETH from L2 onto L1
     * @param params
     * @returns
     */
    async withdraw(params) {
        return L2Transaction_1.L2TransactionReceipt.monkeyPatchWait((await (0, migration_types_1.isNitroL2)(params.l2Signer))
            ? await this.nitroBridger.withdraw(params)
            : await this.classicBridger.withdraw(params));
    }
}
exports.EthBridger = EthBridger;
