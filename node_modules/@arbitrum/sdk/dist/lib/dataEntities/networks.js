/*
 * Copyright 2021, Offchain Labs, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-env node */
'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isL1Network = exports.addCustomNetwork = exports.getL2Network = exports.getL1Network = void 0;
const dotenv_1 = __importDefault(require("dotenv"));
const classic = __importStar(require("@arbitrum/sdk-classic"));
const networks_1 = require("@arbitrum/sdk-classic/dist/lib/dataEntities/networks");
const nitro = __importStar(require("@arbitrum/sdk-nitro"));
const networks_2 = require("@arbitrum/sdk-nitro/dist/lib/dataEntities/networks");
const migration_types_1 = require("../utils/migration_types");
dotenv_1.default.config();
const getL1Network = async (signerOrProvider) => {
    if (await (0, migration_types_1.isNitroL1)(signerOrProvider)) {
        return await nitro.getL1Network(signerOrProvider);
    }
    else {
        return await classic.getL1Network(signerOrProvider);
    }
};
exports.getL1Network = getL1Network;
const getL2Network = async (signerOrProvider) => {
    if (await (0, migration_types_1.isNitroL2)(signerOrProvider)) {
        return await nitro.getL2Network(signerOrProvider);
    }
    else {
        return (0, migration_types_1.convertNetworkClassicToNitro)(await classic.getL2Network(signerOrProvider));
    }
};
exports.getL2Network = getL2Network;
const addCustomNetwork = ({ customL1Network, customL2Network, }) => {
    // we can ignore errors
    if (customL1Network === null || customL1Network === void 0 ? void 0 : customL1Network.chainID)
        delete networks_1.l1Networks[customL1Network.chainID];
    if (customL1Network === null || customL1Network === void 0 ? void 0 : customL1Network.chainID)
        delete networks_2.l1Networks[customL1Network.chainID];
    // add to both classic and nitro
    classic.addCustomNetwork({
        customL1Network: customL1Network,
        customL2Network: (0, migration_types_1.convertNetworkNitroToClassic)(customL2Network),
    });
    nitro.addCustomNetwork({
        customL1Network: customL1Network,
        customL2Network: customL2Network,
    });
};
exports.addCustomNetwork = addCustomNetwork;
const isL1Network = (network) => {
    if (network.partnerChainIDs)
        return true;
    else
        return false;
};
exports.isL1Network = isL1Network;
