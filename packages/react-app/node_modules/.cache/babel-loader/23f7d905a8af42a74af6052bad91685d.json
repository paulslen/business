{"ast":null,"code":"var _jsxFileName = \"/home/leniu/dev/business/packages/react-app/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { useBalance, useContractLoader, useContractReader, useGasPrice, // useOnBlock,\nuseUserProviderAndSigner } from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Account, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch, NetworkDisplay, FaucetHint, NetworkSwitch } from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\"; // contracts\n\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport { getRPCPollTime, Transactor, Web3ModalSetup } from \"./helpers\";\nimport { Home, ExampleUI, Hints, Subgraph } from \"./views\";\nimport { useStaticJsonRPC } from \"./hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  ethers\n} = require(\"ethers\");\n/*\n    Welcome to üèó scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    üåè EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n/// üì° What chain are your contracts deployed to?\n\n\nconst initialNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, goerli, xdai, mainnet)\n// üò¨ Sorry for all the console logging\n\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\n\nconst USE_NETWORK_SELECTOR = false;\nconst web3Modal = Web3ModalSetup(); // üõ∞ providers\n\nconst providers = [\"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\", `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, \"https://rpc.scaffoldeth.io:48544\"];\n\nfunction App(props) {\n  _s();\n\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"goerli\"];\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n  const location = useLocation();\n  const targetNetwork = NETWORKS[selectedNetwork]; // üî≠ block explorer URL\n\n  const blockExplorer = targetNetwork.blockExplorer; // load all your providers\n\n  const localProvider = useStaticJsonRPC([process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl]);\n  const mainnetProvider = useStaticJsonRPC(providers, localProvider); // Sensible pollTimes depending on the provider you are using\n\n  const localProviderPollingTime = getRPCPollTime(localProvider);\n  const mainnetProviderPollingTime = getRPCPollTime(mainnetProvider);\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`); // üõ∞ providers\n\n  if (DEBUG) console.log(\"üì° Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n  /* üíµ This hook will get the price of ETH from ü¶Ñ Uniswap: */\n\n\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider, mainnetProviderPollingTime);\n  /* üî• This hook will get the price of Gas from ‚õΩÔ∏è EtherGasStation */\n\n  const gasPrice = useGasPrice(targetNetwork, \"fast\", localProviderPollingTime); // Use your injected provider from ü¶ä Metamask or if you don't have it then instantly generate a üî• burner wallet.\n\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n  const userSigner = userProviderAndSigner.signer;\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n\n    getAddress();\n  }, [userSigner]); // You can warn the user if you would like them to be on a specific network\n\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId = userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId; // For more hooks, check out üîóeth-hooks at: https://www.npmjs.com/package/eth-hooks\n  // The transactor wraps transactions and provides notificiations\n\n  const tx = Transactor(userSigner, gasPrice); // üèó scaffold-eth is full of handy hooks like this one to get your balance:\n\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime); // Just plug in different üõ∞ providers to get your balance on different chains:\n\n  const yourMainnetBalance = useBalance(mainnetProvider, address, mainnetProviderPollingTime); // const contractConfig = useContractConfig();\n\n  const contractConfig = {\n    deployedContracts: deployedContracts || {},\n    externalContracts: externalContracts || {}\n  }; // Load in your local üìù contract and read a value from it:\n\n  const readContracts = useContractLoader(localProvider, contractConfig); // If you want to make üîê write transactions to your contracts, use the userSigner:\n\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId); // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig); // If you want to call a function on a new block\n  // useOnBlock(mainnetProvider, () => {\n  //   console.log(`‚õì A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  // });\n  // Then read your DAI balance like:\n\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\"0x34aA3F359A9D614239015126635CE7732c18fDF3\"], mainnetProviderPollingTime); // keep track of a variable from the contract in the local React state:\n\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\", [], localProviderPollingTime);\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"üè∑ Resolved austingriffith.eth as:\", addressFromENS)\n  */\n  //\n  // üß´ DEBUG üë®üèª‚Äçüî¨\n  //\n\n  useEffect(() => {\n    if (DEBUG && mainnetProvider && address && selectedChainId && yourLocalBalance && yourMainnetBalance && readContracts && writeContracts && mainnetContracts) {\n      console.log(\"_____________________________________ üèó scaffold-eth _____________________________________\");\n      console.log(\"üåé mainnetProvider\", mainnetProvider);\n      console.log(\"üè† localChainId\", localChainId);\n      console.log(\"üë©‚Äçüíº selected address:\", address);\n      console.log(\"üïµüèª‚Äç‚ôÇÔ∏è selectedChainId:\", selectedChainId);\n      console.log(\"üíµ yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"üíµ yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"üìù readContracts\", readContracts);\n      console.log(\"üåç DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"üíµ yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"üîê writeContracts\", writeContracts);\n    }\n  }, [mainnetProvider, address, selectedChainId, yourLocalBalance, yourMainnetBalance, readContracts, writeContracts, mainnetContracts, localChainId, myMainnetDAIBalance]);\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    }); // Subscribe to session disconnection\n\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    }); // eslint-disable-next-line\n  }, [setInjectedProvider]);\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"relative\",\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flex: 1\n          },\n          children: [USE_NETWORK_SELECTOR && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginRight: 20\n            },\n            children: /*#__PURE__*/_jsxDEV(NetworkSwitch, {\n              networkOptions: networkOptions,\n              selectedNetwork: selectedNetwork,\n              setSelectedNetwork: setSelectedNetwork\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Account, {\n            useBurner: USE_BURNER_WALLET,\n            address: address,\n            localProvider: localProvider,\n            userSigner: userSigner,\n            mainnetProvider: mainnetProvider,\n            price: price,\n            web3Modal: web3Modal,\n            loadWeb3Modal: loadWeb3Modal,\n            logoutOfWeb3Modal: logoutOfWeb3Modal,\n            blockExplorer: blockExplorer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && {\n      /*<FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />*/\n    }, /*#__PURE__*/_jsxDEV(NetworkDisplay, {\n      NETWORKCHECK: NETWORKCHECK,\n      localChainId: localChainId,\n      selectedChainId: selectedChainId,\n      targetNetwork: targetNetwork,\n      logoutOfWeb3Modal: logoutOfWeb3Modal,\n      USE_NETWORK_SELECTOR: USE_NETWORK_SELECTOR\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(Contract, {\n          name: \"NFTProject\",\n          price: price,\n          signer: userSigner,\n          provider: localProvider,\n          address: address,\n          blockExplorer: blockExplorer,\n          contractConfig: contractConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"N6rIQDertPM55TfGx4cGSErjrqw=\", false, function () {\n  return [useLocation, useStaticJsonRPC, useStaticJsonRPC, useExchangeEthPrice, useGasPrice, useUserProviderAndSigner, useBalance, useBalance, useContractLoader, useContractLoader, useContractLoader, useContractReader, useContractReader];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/leniu/dev/business/packages/react-app/src/App.jsx"],"names":["Button","Col","Menu","Row","useBalance","useContractLoader","useContractReader","useGasPrice","useUserProviderAndSigner","useExchangeEthPrice","React","useCallback","useEffect","useState","Link","Route","Switch","useLocation","Account","Contract","Faucet","GasGauge","Header","Ramp","ThemeSwitch","NetworkDisplay","FaucetHint","NetworkSwitch","NETWORKS","ALCHEMY_KEY","externalContracts","deployedContracts","getRPCPollTime","Transactor","Web3ModalSetup","Home","ExampleUI","Hints","Subgraph","useStaticJsonRPC","ethers","require","initialNetwork","localhost","DEBUG","NETWORKCHECK","USE_BURNER_WALLET","USE_NETWORK_SELECTOR","web3Modal","providers","App","props","networkOptions","name","injectedProvider","setInjectedProvider","address","setAddress","selectedNetwork","setSelectedNetwork","location","targetNetwork","blockExplorer","localProvider","process","env","REACT_APP_PROVIDER","rpcUrl","mainnetProvider","localProviderPollingTime","mainnetProviderPollingTime","console","log","logoutOfWeb3Modal","clearCachedProvider","provider","disconnect","setTimeout","window","reload","price","gasPrice","userProviderAndSigner","userSigner","signer","getAddress","newAddress","localChainId","_network","chainId","selectedChainId","tx","yourLocalBalance","yourMainnetBalance","contractConfig","readContracts","writeContracts","mainnetContracts","myMainnetDAIBalance","purpose","utils","formatEther","loadWeb3Modal","connect","Web3Provider","on","code","reason","cachedProvider","faucetAvailable","connection","indexOf","position","display","flexDirection","flex","marginRight","lte","BigNumber","from"],"mappings":"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","sourcesContent":["import { Button, Col, Menu, Row } from \"antd\";\n\nimport \"antd/dist/antd.css\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  // useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  Contract,\n  Faucet,\n  GasGauge,\n  Header,\n  Ramp,\n  ThemeSwitch,\n  NetworkDisplay,\n  FaucetHint,\n  NetworkSwitch,\n} from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport { getRPCPollTime, Transactor, Web3ModalSetup } from \"./helpers\";\nimport { Home, ExampleUI, Hints, Subgraph } from \"./views\";\nimport { useStaticJsonRPC } from \"./hooks\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to üèó scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    üåè EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// üì° What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, goerli, xdai, mainnet)\n\n// üò¨ Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// üõ∞ providers\nconst providers = [\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\n\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"goerli\"];\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n  const location = useLocation();\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // üî≠ block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n\n  const mainnetProvider = useStaticJsonRPC(providers, localProvider);\n\n  // Sensible pollTimes depending on the provider you are using\n  const localProviderPollingTime = getRPCPollTime(localProvider);\n  const mainnetProviderPollingTime = getRPCPollTime(mainnetProvider);\n\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n  // üõ∞ providers\n  if (DEBUG) console.log(\"üì° Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* üíµ This hook will get the price of ETH from ü¶Ñ Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider, mainnetProviderPollingTime);\n\n  /* üî• This hook will get the price of Gas from ‚õΩÔ∏è EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\", localProviderPollingTime);\n  // Use your injected provider from ü¶ä Metamask or if you don't have it then instantly generate a üî• burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out üîóeth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // üèó scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime);\n\n  // Just plug in different üõ∞ providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address, mainnetProviderPollingTime);\n\n  // const contractConfig = useContractConfig();\n\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n\n  // Load in your local üìù contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make üîê write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  // useOnBlock(mainnetProvider, () => {\n  //   console.log(`‚õì A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  // });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(\n    mainnetContracts,\n    \"DAI\",\n    \"balanceOf\",\n    [\"0x34aA3F359A9D614239015126635CE7732c18fDF3\"],\n    mainnetProviderPollingTime,\n  );\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\", [], localProviderPollingTime);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"üè∑ Resolved austingriffith.eth as:\", addressFromENS)\n  */\n\n  //\n  // üß´ DEBUG üë®üèª‚Äçüî¨\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ üèó scaffold-eth _____________________________________\");\n      console.log(\"üåé mainnetProvider\", mainnetProvider);\n      console.log(\"üè† localChainId\", localChainId);\n      console.log(\"üë©‚Äçüíº selected address:\", address);\n      console.log(\"üïµüèª‚Äç‚ôÇÔ∏è selectedChainId:\", selectedChainId);\n      console.log(\"üíµ yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"üíµ yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"üìù readContracts\", readContracts);\n      console.log(\"üåç DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"üíµ yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"üîê writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    localChainId,\n    myMainnetDAIBalance,\n  ]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  return (\n    <div className=\"App\">\n      {/* ‚úèÔ∏è Edit the header and change the title to your project name */}\n      <Header>\n        {/* üë®‚Äçüíº Your account is in the top right with a wallet at connect options */}\n        <div style={{ position: \"relative\", display: \"flex\", flexDirection: \"column\" }}>\n          <div style={{ display: \"flex\", flex: 1 }}>\n            {USE_NETWORK_SELECTOR && (\n              <div style={{ marginRight: 20 }}>\n                <NetworkSwitch\n                  networkOptions={networkOptions}\n                  selectedNetwork={selectedNetwork}\n                  setSelectedNetwork={setSelectedNetwork}\n                />\n              </div>\n            )}\n            <Account\n              useBurner={USE_BURNER_WALLET}\n              address={address}\n              localProvider={localProvider}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              price={price}\n              web3Modal={web3Modal}\n              loadWeb3Modal={loadWeb3Modal}\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\n              blockExplorer={blockExplorer}\n            />\n          </div>\n        </div>\n      </Header>\n      {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\n        {/*<FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />*/}\n      )}\n      <NetworkDisplay\n        NETWORKCHECK={NETWORKCHECK}\n        localChainId={localChainId}\n        selectedChainId={selectedChainId}\n        targetNetwork={targetNetwork}\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n      />{/*\n      <Menu style={{ textAlign: \"center\", marginTop: 20 }} selectedKeys={[location.pathname]} mode=\"horizontal\">\n        <Menu.Item key=\"/\">\n          <Link to=\"/\">App Home</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/debug\">\n          <Link to=\"/debug\">Debug Contracts</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/hints\">\n          <Link to=\"/hints\">Hints</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/exampleui\">\n          <Link to=\"/exampleui\">ExampleUI</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/mainnetdai\">\n          <Link to=\"/mainnetdai\">Mainnet DAI</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/subgraph\">\n          <Link to=\"/subgraph\">Subgraph</Link>\n        </Menu.Item>\n      </Menu>\n*/}\n      <Switch>\n        <Route exact path=\"/\">\n        <Contract\n            name=\"NFTProject\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance \n          <Home yourLocalBalance={yourLocalBalance} readContracts={readContracts} />*/}\n        </Route>\n        {/*\n        <Route exact path=\"/debug\">\n          {/*\n                üéõ this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n\n          {/*<Contract\n            name=\"YourContract\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n          \n        </Route>\n        <Route path=\"/hints\">\n          <Hints\n            address={address}\n            yourLocalBalance={yourLocalBalance}\n            mainnetProvider={mainnetProvider}\n            price={price}\n          />\n        </Route>\n        <Route path=\"/exampleui\">\n          <ExampleUI\n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n            purpose={purpose}\n          />\n        </Route>\n        <Route path=\"/mainnetdai\">\n          <Contract\n            name=\"DAI\"\n            customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n            signer={userSigner}\n            provider={mainnetProvider}\n            address={address}\n            blockExplorer=\"https://etherscan.io/\"\n            contractConfig={contractConfig}\n            chainId={1}\n          />*/}\n          {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            */}{/*\n        </Route>\n        <Route path=\"/subgraph\">\n          <Subgraph\n            subgraphUri={props.subgraphUri}\n            tx={tx}\n            writeContracts={writeContracts}\n            mainnetProvider={mainnetProvider}\n          />\n        </Route>*/}\n      </Switch>\n\n     {/*  <ThemeSwitch />*/}\n        \n      {/* üó∫ Extra UI like gas price, eth price, faucet, and support: */}\n      {/* <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                üí¨\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n*/}{/* \n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>*/}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}